

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Nov 26 22:23:40 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.43
    29                           ; Generated 25/07/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F1503 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0095                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010E                     	;# 
   106  0111                     	;# 
   107  0112                     	;# 
   108  0113                     	;# 
   109  0114                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011D                     	;# 
   116  018C                     	;# 
   117  018E                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  0197                     	;# 
   127  020C                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0391                     	;# 
   144  0392                     	;# 
   145  0393                     	;# 
   146  0498                     	;# 
   147  0498                     	;# 
   148  0499                     	;# 
   149  049A                     	;# 
   150  049B                     	;# 
   151  049B                     	;# 
   152  049C                     	;# 
   153  049D                     	;# 
   154  049E                     	;# 
   155  049F                     	;# 
   156  0611                     	;# 
   157  0612                     	;# 
   158  0613                     	;# 
   159  0613                     	;# 
   160  0614                     	;# 
   161  0615                     	;# 
   162  0616                     	;# 
   163  0616                     	;# 
   164  0617                     	;# 
   165  0618                     	;# 
   166  0619                     	;# 
   167  0619                     	;# 
   168  061A                     	;# 
   169  061B                     	;# 
   170  061C                     	;# 
   171  061C                     	;# 
   172  0691                     	;# 
   173  0692                     	;# 
   174  0693                     	;# 
   175  0694                     	;# 
   176  0695                     	;# 
   177  0F0F                     	;# 
   178  0F10                     	;# 
   179  0F11                     	;# 
   180  0F12                     	;# 
   181  0F13                     	;# 
   182  0F14                     	;# 
   183  0F15                     	;# 
   184  0F16                     	;# 
   185  0F17                     	;# 
   186  0F18                     	;# 
   187  0F19                     	;# 
   188  0F1A                     	;# 
   189  0F1B                     	;# 
   190  0F1C                     	;# 
   191  0F1D                     	;# 
   192  0F1E                     	;# 
   193  0F1F                     	;# 
   194  0FE3                     	;# 
   195  0FE4                     	;# 
   196  0FE5                     	;# 
   197  0FE6                     	;# 
   198  0FE7                     	;# 
   199  0FE8                     	;# 
   200  0FE9                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000E                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0013                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  008C                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010E                     	;# 
   250  0111                     	;# 
   251  0112                     	;# 
   252  0113                     	;# 
   253  0114                     	;# 
   254  0115                     	;# 
   255  0116                     	;# 
   256  0117                     	;# 
   257  0118                     	;# 
   258  0119                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0197                     	;# 
   271  020C                     	;# 
   272  0211                     	;# 
   273  0211                     	;# 
   274  0212                     	;# 
   275  0212                     	;# 
   276  0213                     	;# 
   277  0213                     	;# 
   278  0214                     	;# 
   279  0214                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0216                     	;# 
   284  0216                     	;# 
   285  0217                     	;# 
   286  0217                     	;# 
   287  0391                     	;# 
   288  0392                     	;# 
   289  0393                     	;# 
   290  0498                     	;# 
   291  0498                     	;# 
   292  0499                     	;# 
   293  049A                     	;# 
   294  049B                     	;# 
   295  049B                     	;# 
   296  049C                     	;# 
   297  049D                     	;# 
   298  049E                     	;# 
   299  049F                     	;# 
   300  0611                     	;# 
   301  0612                     	;# 
   302  0613                     	;# 
   303  0613                     	;# 
   304  0614                     	;# 
   305  0615                     	;# 
   306  0616                     	;# 
   307  0616                     	;# 
   308  0617                     	;# 
   309  0618                     	;# 
   310  0619                     	;# 
   311  0619                     	;# 
   312  061A                     	;# 
   313  061B                     	;# 
   314  061C                     	;# 
   315  061C                     	;# 
   316  0691                     	;# 
   317  0692                     	;# 
   318  0693                     	;# 
   319  0694                     	;# 
   320  0695                     	;# 
   321  0F0F                     	;# 
   322  0F10                     	;# 
   323  0F11                     	;# 
   324  0F12                     	;# 
   325  0F13                     	;# 
   326  0F14                     	;# 
   327  0F15                     	;# 
   328  0F16                     	;# 
   329  0F17                     	;# 
   330  0F18                     	;# 
   331  0F19                     	;# 
   332  0F1A                     	;# 
   333  0F1B                     	;# 
   334  0F1C                     	;# 
   335  0F1D                     	;# 
   336  0F1E                     	;# 
   337  0F1F                     	;# 
   338  0FE3                     	;# 
   339  0FE4                     	;# 
   340  0FE5                     	;# 
   341  0FE6                     	;# 
   342  0FE7                     	;# 
   343  0FE8                     	;# 
   344  0FE9                     	;# 
   345  0FEA                     	;# 
   346  0FEB                     	;# 
   347  0FED                     	;# 
   348  0FEE                     	;# 
   349  0FEF                     	;# 
   350                           
   351                           	psect	stringtext1
   352  0614                     __pstringtext1:	
   353  0614                     _RX_PW_P:	
   354  0614  3411               	retlw	17
   355  0615  3412               	retlw	18
   356  0616  3413               	retlw	19
   357  0617  3414               	retlw	20
   358  0618  3415               	retlw	21
   359  0619  3416               	retlw	22
   360  061A                     __end_of_RX_PW_P:	
   361                           
   362                           	psect	stringtext2
   363  060E                     __pstringtext2:	
   364  060E                     _RX_ADDR_P:	
   365  060E  340A               	retlw	10
   366  060F  340B               	retlw	11
   367  0610  340C               	retlw	12
   368  0611  340D               	retlw	13
   369  0612  340E               	retlw	14
   370  0613  340F               	retlw	15
   371  0614                     __end_of_RX_ADDR_P:	
   372                           
   373                           	psect	stringtext3
   374  060A                     __pstringtext3:	
   375  060A                     _MY_ADDRESS:	
   376  060A  34CF               	retlw	207
   377  060B  3483               	retlw	131
   378  060C  34F2               	retlw	242
   379  060D  34F5               	retlw	245
   380  060E                     __end_of_MY_ADDRESS:	
   381                           
   382                           	psect	stringtext4
   383  0605                     __pstringtext4:	
   384  0605                     _TIMEOUT:	
   385  0605  3480               	retlw	128
   386  0606  3438               	retlw	56
   387  0607                     __end_of_TIMEOUT:	
   388                           
   389                           	psect	stringtext5
   390  0604                     __pstringtext5:	
   391  0604                     _START_TIMING:	
   392  0604  3414               	retlw	20
   393  0605                     __end_of_START_TIMING:	
   394                           
   395                           	psect	stringtext6
   396  0603                     __pstringtext6:	
   397  0603                     _TOWER_ID:	
   398  0603  34B1               	retlw	177
   399  0604                     __end_of_TOWER_ID:	
   400                           
   401                           	psect	stringtext7
   402  0602                     __pstringtext7:	
   403  0602                     _TX_ADDR:	
   404  0602  3410               	retlw	16
   405  0603                     __end_of_TX_ADDR:	
   406  000C                     _PORTAbits	set	12
   407  0011                     _PIR1bits	set	17
   408  0099                     _OSCCONbits	set	153
   409  0095                     _OPTION_REGbits	set	149
   410  008C                     _TRISAbits	set	140
   411  008E                     _TRISCbits	set	142
   412  010C                     _LATAbits	set	268
   413  010E                     _LATCbits	set	270
   414  011D                     _APFCON	set	285
   415  018E                     _ANSELC	set	398
   416  018C                     _ANSELA	set	396
   417  0211                     _SSP1BUF	set	529
   418  0214                     _SSP1STATbits	set	532
   419  0215                     _SSP1CON1bits	set	533
   420  020C                     _WPUAbits	set	524
   421                           
   422                           ; #config settings
   423  0000                     
   424                           	psect	cinit
   425  07FE                     start_initialization:	
   426  07FE                     __initialization:	
   427  07FE                     end_of_initialization:	
   428                           ;End of C runtime variable initialization code
   429                           
   430  07FE                     __end_of__initialization:	
   431  07FE  0020               	movlb	0
   432  07FF  2F9D               	ljmp	_main	;jump to C main() function
   433                           
   434                           	psect	cstackCOMMON
   435  0070                     __pcstackCOMMON:	
   436  0070                     ?_configureReceiver:	
   437  0070                     ??_configureReceiver:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_configureTX:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_configureRX:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_readData:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_configIO:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ??_configIO:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_SPI_init:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_SPI_init:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_SPI_write_byte:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_SPI_write_byte:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_SPI_read_byte:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_resetIRQ:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_main:	
   474                           ; 1 bytes @ 0x0
   475                           
   476                           
   477                           ; 2 bytes @ 0x0
   478  0070                     	ds	1
   479  0071                     SPI_write_byte@data:	
   480                           
   481                           ; 1 bytes @ 0x1
   482  0071                     	ds	1
   483  0072                     SPI_write_byte@ret_data:	
   484                           
   485                           ; 1 bytes @ 0x2
   486  0072                     	ds	1
   487  0073                     ??_readData:	
   488  0073                     ?_SPI_writeArray:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     ??_SPI_read_byte:	
   492                           ; 1 bytes @ 0x3
   493                           
   494  0073                     SPI_writeArray@length:	
   495                           ; 1 bytes @ 0x3
   496                           
   497                           
   498                           ; 1 bytes @ 0x3
   499  0073                     	ds	1
   500  0074                     ??_SPI_writeArray:	
   501  0074                     SPI_read_byte@address:	
   502                           ; 1 bytes @ 0x4
   503                           
   504                           
   505                           ; 1 bytes @ 0x4
   506  0074                     	ds	1
   507  0075                     SPI_read_byte@ret:	
   508  0075                     readData@buf:	
   509                           ; 1 bytes @ 0x5
   510                           
   511                           
   512                           ; 1 bytes @ 0x5
   513  0075                     	ds	1
   514  0076                     SPI_writeArray@ret:	
   515  0076                     readData@i:	
   516                           ; 1 bytes @ 0x6
   517                           
   518                           
   519                           ; 1 bytes @ 0x6
   520  0076                     	ds	1
   521  0077                     SPI_writeArray@i:	
   522                           
   523                           ; 1 bytes @ 0x7
   524  0077                     	ds	1
   525  0078                     SPI_writeArray@data:	
   526                           
   527                           ; 1 bytes @ 0x8
   528  0078                     	ds	1
   529  0079                     ??_configureTX:	
   530  0079                     ??_configureRX:	
   531                           ; 1 bytes @ 0x9
   532                           
   533  0079                     ??_resetIRQ:	
   534                           ; 1 bytes @ 0x9
   535                           
   536                           
   537                           ; 1 bytes @ 0x9
   538  0079                     	ds	1
   539  007A                     resetIRQ@write:	
   540  007A                     configureTX@write:	
   541                           ; 2 bytes @ 0xA
   542                           
   543  007A                     configureRX@write:	
   544                           ; 2 bytes @ 0xA
   545                           
   546                           
   547                           ; 2 bytes @ 0xA
   548  007A                     	ds	2
   549  007C                     ?_transmitData:	
   550  007C                     transmitData@len:	
   551                           ; 2 bytes @ 0xC
   552                           
   553                           
   554                           ; 1 bytes @ 0xC
   555  007C                     	ds	1
   556  007D                     ??_main:	
   557                           
   558                           ; 1 bytes @ 0xD
   559  007D                     	ds	1
   560                           
   561                           	psect	cstackBANK0
   562  0020                     __pcstackBANK0:	
   563  0020                     ??_transmitData:	
   564                           
   565                           ; 1 bytes @ 0x0
   566  0020                     	ds	2
   567  0022                     transmitData@write:	
   568                           
   569                           ; 11 bytes @ 0x2
   570  0022                     	ds	11
   571  002D                     transmitData@data:	
   572                           
   573                           ; 1 bytes @ 0xD
   574  002D                     	ds	1
   575  002E                     transmitData@sreg:	
   576                           
   577                           ; 1 bytes @ 0xE
   578  002E                     	ds	1
   579  002F                     transmitData@i:	
   580                           
   581                           ; 1 bytes @ 0xF
   582  002F                     	ds	1
   583  0030                     main@buf:	
   584                           
   585                           ; 3 bytes @ 0x10
   586  0030                     	ds	3
   587  0033                     main@test:	
   588                           
   589                           ; 3 bytes @ 0x13
   590  0033                     	ds	3
   591  0036                     main@distancePacket:	
   592                           
   593                           ; 3 bytes @ 0x16
   594  0036                     	ds	3
   595  0039                     main@timeCount:	
   596                           
   597                           ; 2 bytes @ 0x19
   598  0039                     	ds	2
   599                           
   600                           	psect	maintext
   601  079D                     __pmaintext:	
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 46 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  distancePack    3   22[BANK0 ] unsigned char [3]
   612 ;;  timeCount       2   25[BANK0 ] int 
   613 ;;  test            3   19[BANK0 ] unsigned char [3]
   614 ;;  buf             3   16[BANK0 ] unsigned char [3]
   615 ;; Return value:  Size  Location     Type
   616 ;;                  2  106[None  ] int 
   617 ;; Registers used:
   618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : B1F/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMMON   BANK0   BANK1
   624 ;;      Params:         0       0       0
   625 ;;      Locals:         0      11       0
   626 ;;      Temps:          1       0       0
   627 ;;      Totals:         1      11       0
   628 ;;Total ram usage:       12 bytes
   629 ;; Hardware stack levels required when called:    4
   630 ;; This function calls:
   631 ;;		_SPI_init
   632 ;;		_SPI_read_byte
   633 ;;		_configureRX
   634 ;;		_configureReceiver
   635 ;;		_configureTX
   636 ;;		_readData
   637 ;;		_transmitData
   638 ;; This function is called by:
   639 ;;		Startup code after reset
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           
   644                           ;psect for function _main
   645  079D                     _main:	
   646                           
   647                           ;main.c: 48: TRISAbits.TRISA1 = 0;
   648                           
   649                           ;incstack = 0
   650                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   651  079D  0021               	movlb	1	; select bank1
   652  079E  108C               	bcf	12,1	;volatile
   653                           
   654                           ;main.c: 49: LATAbits.LATA1 = 0;
   655  079F  0022               	movlb	2	; select bank2
   656  07A0  108C               	bcf	12,1	;volatile
   657                           
   658                           ;main.c: 50: OSCCONbits.IRCF = 0xF;
   659  07A1  3078               	movlw	120
   660  07A2  0021               	movlb	1	; select bank1
   661  07A3  0499               	iorwf	25,f	;volatile
   662                           
   663                           ;main.c: 53: configureReceiver();
   664  07A4  2607               	fcall	_configureReceiver
   665                           
   666                           ;main.c: 54: SPI_init();
   667  07A5  261A               	fcall	_SPI_init
   668                           
   669                           ;main.c: 55: configureTX();
   670  07A6  2740               	fcall	_configureTX
   671                           
   672                           ;main.c: 57: uint8_t test[3];
   673                           ;main.c: 58: test[0] = TOWER_ID;
   674  07A7  3003               	movlw	low (_TOWER_ID| (0+32768))
   675  07A8  0084               	movwf	4
   676  07A9  3086               	movlw	high (_TOWER_ID| (0+32768))
   677  07AA  0085               	movwf	5
   678  07AB  0800               	movf	0,w	;code access
   679  07AC  00FD               	movwf	??_main
   680  07AD  087D               	movf	??_main,w
   681  07AE  0020               	movlb	0	; select bank0
   682  07AF  00B3               	movwf	main@test
   683                           
   684                           ;main.c: 59: test[1] = 0xdd;
   685  07B0  30DD               	movlw	221
   686  07B1  00FD               	movwf	??_main
   687  07B2  087D               	movf	??_main,w
   688  07B3  00B4               	movwf	main@test+1
   689                           
   690                           ;main.c: 60: test[2] = 0xee;
   691  07B4  30EE               	movlw	238
   692  07B5  00FD               	movwf	??_main
   693  07B6  087D               	movf	??_main,w
   694  07B7  00B5               	movwf	main@test+2
   695  07B8                     L1:	
   696                           
   697                           ;main.c: 63: configureRX();
   698  07B8  26E3               	fcall	_configureRX
   699  07B9                     l915:	
   700                           ;main.c: 69: while(SPI_read_byte(0x00) != 0b00111011) configureRX();
   701                           
   702                           ;main.c: 66: uint8_t buf[3];
   703                           ;main.c: 68: while(1) {
   704                           
   705  07B9  3000               	movlw	0
   706  07BA  2628               	fcall	_SPI_read_byte
   707  07BB  3A3B               	xorlw	59
   708  07BC  1D03               	skipz
   709  07BD  2FB8               	goto	L1
   710                           
   711                           ;main.c: 70: buf[0] = 0xff;
   712  07BE  30FF               	movlw	255
   713  07BF  00FD               	movwf	??_main
   714  07C0  087D               	movf	??_main,w
   715  07C1  0020               	movlb	0	; select bank0
   716  07C2  00B0               	movwf	main@buf
   717  07C3                     l921:	
   718                           ;main.c: 71: while(buf[0] != START_TIMING) {
   719                           
   720  07C3  3004               	movlw	low (_START_TIMING| (0+32768))
   721  07C4  0084               	movwf	4
   722  07C5  3086               	movlw	high (_START_TIMING| (0+32768))
   723  07C6  0085               	movwf	5
   724  07C7  0800               	movf	0,w	;code access
   725  07C8  00FD               	movwf	??_main
   726  07C9  0020               	movlb	0	; select bank0
   727  07CA  0830               	movf	main@buf,w
   728  07CB  067D               	xorwf	??_main,w
   729  07CC  1903               	btfsc	3,2
   730  07CD  2FD9               	goto	l116
   731                           
   732                           ;main.c: 72: LATCbits.LATC4 = 1;
   733  07CE  0022               	movlb	2	; select bank2
   734  07CF  160E               	bsf	14,4	;volatile
   735                           
   736                           ;main.c: 73: LATAbits.LATA1 = 0;
   737  07D0  108C               	bcf	12,1	;volatile
   738  07D1                     l113:	
   739                           ;main.c: 75: while(PORTAbits.RA2) {
   740                           
   741  07D1  0020               	movlb	0	; select bank0
   742  07D2  190C               	btfsc	12,2	;volatile
   743  07D3  2FD1               	goto	l113
   744                           
   745                           ;main.c: 85: }
   746                           ;main.c: 86: LATCbits.LATC4 = 0;
   747  07D4  0022               	movlb	2	; select bank2
   748  07D5  120E               	bcf	14,4	;volatile
   749                           
   750                           ;main.c: 87: readData(buf);
   751  07D6  3030               	movlw	(low (main@buf| 0))& (0+255)
   752  07D7  2682               	fcall	_readData
   753  07D8  2FC3               	goto	l921
   754  07D9                     l116:	
   755                           
   756                           ;main.c: 88: }
   757                           ;main.c: 89: LATAbits.LATA1 = 1;
   758  07D9  0022               	movlb	2	; select bank2
   759  07DA  148C               	bsf	12,1	;volatile
   760                           
   761                           ;main.c: 91: int timeCount = 0;
   762  07DB  0020               	movlb	0	; select bank0
   763  07DC  01B9               	clrf	main@timeCount
   764  07DD  01BA               	clrf	main@timeCount+1
   765  07DE                     l927:	
   766                           ;main.c: 92: while(PORTAbits.RA4) {
   767                           
   768  07DE  1E0C               	btfss	12,4	;volatile
   769  07DF  2FE5               	goto	l929
   770                           
   771                           ;main.c: 93: timeCount++;
   772  07E0  3001               	movlw	1
   773  07E1  07B9               	addwf	main@timeCount,f
   774  07E2  3000               	movlw	0
   775  07E3  3DBA               	addwfc	main@timeCount+1,f
   776  07E4  2FDE               	goto	l927
   777  07E5                     l929:	
   778                           
   779                           ;main.c: 94: }
   780                           ;main.c: 95: configureTX();
   781  07E5  2740               	fcall	_configureTX
   782                           
   783                           ;main.c: 96: uint8_t distancePacket[3];
   784                           ;main.c: 97: distancePacket[0] = TOWER_ID;
   785  07E6  3003               	movlw	low (_TOWER_ID| (0+32768))
   786  07E7  0084               	movwf	4
   787  07E8  3086               	movlw	high (_TOWER_ID| (0+32768))
   788  07E9  0085               	movwf	5
   789  07EA  0800               	movf	0,w	;code access
   790  07EB  00FD               	movwf	??_main
   791  07EC  087D               	movf	??_main,w
   792  07ED  0020               	movlb	0	; select bank0
   793  07EE  00B6               	movwf	main@distancePacket
   794                           
   795                           ;main.c: 98: distancePacket[1] = (timeCount & 0xff);
   796  07EF  0839               	movf	main@timeCount,w
   797  07F0  00FD               	movwf	??_main
   798  07F1  087D               	movf	??_main,w
   799  07F2  00B7               	movwf	main@distancePacket+1
   800                           
   801                           ;main.c: 99: distancePacket[2] = (timeCount >> 8) & 0xff;
   802  07F3  083A               	movf	main@timeCount+1,w
   803  07F4  00FD               	movwf	??_main
   804  07F5  087D               	movf	??_main,w
   805  07F6  00B8               	movwf	main@distancePacket+2
   806                           
   807                           ;main.c: 100: transmitData(distancePacket, 3);
   808  07F7  3003               	movlw	3
   809  07F8  00FD               	movwf	??_main
   810  07F9  087D               	movf	??_main,w
   811  07FA  00FC               	movwf	transmitData@len
   812  07FB  3036               	movlw	(low (main@distancePacket| 0))& (0+255)
   813  07FC  26A2               	fcall	_transmitData
   814  07FD  2FB9               	goto	l915
   815  07FE                     __end_of_main:	
   816                           ;main.c: 101: }
   817                           ;main.c: 103: return 0;
   818                           ;	Return value of _main is never used
   819                           
   820                           
   821                           	psect	text1
   822  06A2                     __ptext1:	
   823 ;; *************** function _transmitData *****************
   824 ;; Defined at:
   825 ;;		line 151 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  data            1    wreg     PTR unsigned char 
   828 ;;		 -> main@distancePacket(3), 
   829 ;;  len             1   12[COMMON] unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  data            1   13[BANK0 ] PTR unsigned char 
   832 ;;		 -> main@distancePacket(3), 
   833 ;;  i               1   15[BANK0 ] unsigned char 
   834 ;;  write          11    2[BANK0 ] unsigned char [11]
   835 ;;  sreg            1   14[BANK0 ] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2   12[COMMON] int 
   838 ;; Registers used:
   839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMMON   BANK0   BANK1
   845 ;;      Params:         1       0       0
   846 ;;      Locals:         0      14       0
   847 ;;      Temps:          0       2       0
   848 ;;      Totals:         1      16       0
   849 ;;Total ram usage:       17 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    3
   852 ;; This function calls:
   853 ;;		_SPI_writeArray
   854 ;;		_SPI_write_byte
   855 ;;		_resetIRQ
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           
   862                           ;psect for function _transmitData
   863  06A2                     _transmitData:	
   864                           
   865                           ;incstack = 0
   866                           ; Regs used in _transmitData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   867                           ;transmitData@data stored from wreg
   868  06A2  0020               	movlb	0	; select bank0
   869  06A3  00AD               	movwf	transmitData@data
   870                           
   871                           ;main.c: 152: uint8_t write[11];
   872                           ;main.c: 153: write[0]= 0b10100000;
   873  06A4  30A0               	movlw	160
   874  06A5  00A0               	movwf	??_transmitData
   875  06A6  0820               	movf	??_transmitData,w
   876  06A7  00A2               	movwf	transmitData@write
   877                           
   878                           ;main.c: 154: for(uint8_t i = 0; i < len; ++i) {
   879  06A8  01AF               	clrf	transmitData@i
   880  06A9                     l877:	
   881  06A9  087C               	movf	transmitData@len,w
   882  06AA  022F               	subwf	transmitData@i,w
   883  06AB  1803               	btfsc	3,0
   884  06AC  2EC1               	goto	l879
   885                           
   886                           ;main.c: 155: write[1+i] = data[i];
   887  06AD  082F               	movf	transmitData@i,w
   888  06AE  072D               	addwf	transmitData@data,w
   889  06AF  00A0               	movwf	??_transmitData
   890  06B0  0820               	movf	??_transmitData,w
   891  06B1  0086               	movwf	6
   892  06B2  0187               	clrf	7
   893  06B3  0801               	movf	1,w
   894  06B4  00A1               	movwf	??_transmitData+1
   895  06B5  082F               	movf	transmitData@i,w
   896  06B6  3E01               	addlw	1
   897  06B7  3E22               	addlw	(low (transmitData@write| 0))& (0+255)
   898  06B8  0086               	movwf	6
   899  06B9  0187               	clrf	7
   900  06BA  0821               	movf	??_transmitData+1,w
   901  06BB  0081               	movwf	1
   902  06BC  3001               	movlw	1
   903  06BD  00A0               	movwf	??_transmitData
   904  06BE  0820               	movf	??_transmitData,w
   905  06BF  07AF               	addwf	transmitData@i,f
   906  06C0  2EA9               	goto	l877
   907  06C1                     l879:	
   908                           
   909                           ;main.c: 156: }
   910                           ;main.c: 157: SPI_writeArray(write, 1 + len);
   911  06C1  087C               	movf	transmitData@len,w
   912  06C2  3E01               	addlw	1
   913  06C3  00A0               	movwf	??_transmitData
   914  06C4  0820               	movf	??_transmitData,w
   915  06C5  00F3               	movwf	SPI_writeArray@length
   916  06C6  3022               	movlw	(low (transmitData@write| 0))& (0+255)
   917  06C7  2667               	fcall	_SPI_writeArray
   918  06C8                     l881:	
   919                           ;main.c: 158: uint8_t sreg;
   920                           ;main.c: 159: do {
   921                           
   922                           
   923                           ;main.c: 160: LATCbits.LATC4 = 1;
   924  06C8  0022               	movlb	2	; select bank2
   925  06C9  160E               	bsf	14,4	;volatile
   926                           
   927                           ;main.c: 161: _delay((unsigned long)((15)*(16000000UL/4000000.0)));
   928  06CA  3014               	movlw	20
   929  06CB                     u237:	
   930  06CB  0B89               	decfsz	9,f
   931  06CC  2ECB               	goto	u237
   932                           
   933                           ;main.c: 162: LATCbits.LATC4 = 0;
   934  06CD  0022               	movlb	2	; select bank2
   935  06CE  120E               	bcf	14,4	;volatile
   936  06CF                     l132:	
   937                           ;main.c: 163: while(PORTAbits.RA2);
   938                           
   939  06CF  0020               	movlb	0	; select bank0
   940  06D0  190C               	btfsc	12,2	;volatile
   941  06D1  2ECF               	goto	l132
   942                           
   943                           ;main.c: 164: LATCbits.LATC3 = 0;
   944  06D2  0022               	movlb	2	; select bank2
   945  06D3  118E               	bcf	14,3	;volatile
   946                           
   947                           ;main.c: 165: sreg = SPI_write_byte(0xFF);
   948  06D4  30FF               	movlw	255
   949  06D5  2646               	fcall	_SPI_write_byte
   950  06D6  0020               	movlb	0	; select bank0
   951  06D7  00A0               	movwf	??_transmitData
   952  06D8  0820               	movf	??_transmitData,w
   953  06D9  00AE               	movwf	transmitData@sreg
   954                           
   955                           ;main.c: 166: LATCbits.LATC3 = 1;
   956  06DA  0022               	movlb	2	; select bank2
   957  06DB  158E               	bsf	14,3	;volatile
   958                           
   959                           ;main.c: 167: resetIRQ();
   960  06DC  2637               	fcall	_resetIRQ
   961                           
   962                           ;main.c: 168: } while(!(sreg & 0b00110000));
   963  06DD  0020               	movlb	0	; select bank0
   964  06DE  082E               	movf	transmitData@sreg,w
   965  06DF  3930               	andlw	48
   966  06E0  1D03               	btfss	3,2
   967  06E1  0008               	return
   968  06E2  2EC8               	goto	l881
   969  06E3                     __end_of_transmitData:	
   970                           ;main.c: 171: return (sreg & 0b00010000);
   971                           ;	Return value of _transmitData is never used
   972                           
   973                           
   974                           	psect	text2
   975  0637                     __ptext2:	
   976 ;; *************** function _resetIRQ *****************
   977 ;; Defined at:
   978 ;;		line 70 in file "spi.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  write           2   10[COMMON] unsigned char [2]
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1
   992 ;;      Params:         0       0       0
   993 ;;      Locals:         2       0       0
   994 ;;      Temps:          1       0       0
   995 ;;      Totals:         3       0       0
   996 ;;Total ram usage:        3 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    2
   999 ;; This function calls:
  1000 ;;		_SPI_writeArray
  1001 ;; This function is called by:
  1002 ;;		_transmitData
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           
  1007                           ;psect for function _resetIRQ
  1008  0637                     _resetIRQ:	
  1009                           
  1010                           ;spi.c: 71: uint8_t write[2];
  1011                           ;spi.c: 72: write[0] = (0x07 & 0b00011111) | 0b00100000;
  1012                           
  1013                           ;incstack = 0
  1014                           ; Regs used in _resetIRQ: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1015  0637  3027               	movlw	39
  1016  0638  00F9               	movwf	??_resetIRQ
  1017  0639  0879               	movf	??_resetIRQ,w
  1018  063A  00FA               	movwf	resetIRQ@write
  1019                           
  1020                           ;spi.c: 73: write[1] = 0b01110000;
  1021  063B  3070               	movlw	112
  1022  063C  00F9               	movwf	??_resetIRQ
  1023  063D  0879               	movf	??_resetIRQ,w
  1024  063E  00FB               	movwf	resetIRQ@write+1
  1025                           
  1026                           ;spi.c: 74: SPI_writeArray(write, 2);
  1027  063F  3002               	movlw	2
  1028  0640  00F9               	movwf	??_resetIRQ
  1029  0641  0879               	movf	??_resetIRQ,w
  1030  0642  00F3               	movwf	SPI_writeArray@length
  1031  0643  307A               	movlw	(low (resetIRQ@write| 0))& (0+255)
  1032  0644  2667               	fcall	_SPI_writeArray
  1033  0645  0008               	return
  1034  0646                     __end_of_resetIRQ:	
  1035                           
  1036                           	psect	text3
  1037  0682                     __ptext3:	
  1038 ;; *************** function _readData *****************
  1039 ;; Defined at:
  1040 ;;		line 179 in file "main.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  buf             1    wreg     PTR unsigned char 
  1043 ;;		 -> main@buf(3), 
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  buf             1    5[COMMON] PTR unsigned char 
  1046 ;;		 -> main@buf(3), 
  1047 ;;  i               1    6[COMMON] unsigned char 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMMON   BANK0   BANK1
  1057 ;;      Params:         0       0       0
  1058 ;;      Locals:         2       0       0
  1059 ;;      Temps:          2       0       0
  1060 ;;      Totals:         4       0       0
  1061 ;;Total ram usage:        4 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    1
  1064 ;; This function calls:
  1065 ;;		_SPI_write_byte
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           
  1072                           ;psect for function _readData
  1073  0682                     _readData:	
  1074                           
  1075                           ;incstack = 0
  1076                           ; Regs used in _readData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1077                           ;readData@buf stored from wreg
  1078  0682  00F5               	movwf	readData@buf
  1079                           
  1080                           ;main.c: 180: LATCbits.LATC3 = 0;
  1081  0683  0022               	movlb	2	; select bank2
  1082  0684  118E               	bcf	14,3	;volatile
  1083                           
  1084                           ;main.c: 181: SPI_write_byte(0b01100001);
  1085  0685  3061               	movlw	97
  1086  0686  2646               	fcall	_SPI_write_byte
  1087                           
  1088                           ;main.c: 182: for(uint8_t i = 0; i < 3; ++i) {
  1089  0687  01F6               	clrf	readData@i
  1090  0688  3003               	movlw	3
  1091  0689  0276               	subwf	readData@i,w
  1092  068A  1803               	btfsc	3,0
  1093  068B  2E9F               	goto	l143
  1094  068C                     l863:	
  1095                           
  1096                           ;main.c: 183: buf[i] = SPI_write_byte(0xff);
  1097  068C  30FF               	movlw	255
  1098  068D  2646               	fcall	_SPI_write_byte
  1099  068E  00F3               	movwf	??_readData
  1100  068F  0876               	movf	readData@i,w
  1101  0690  0775               	addwf	readData@buf,w
  1102  0691  00F4               	movwf	??_readData+1
  1103  0692  0874               	movf	??_readData+1,w
  1104  0693  0086               	movwf	6
  1105  0694  0187               	clrf	7
  1106  0695  0873               	movf	??_readData,w
  1107  0696  0081               	movwf	1
  1108  0697  3001               	movlw	1
  1109  0698  00F3               	movwf	??_readData
  1110  0699  0873               	movf	??_readData,w
  1111  069A  07F6               	addwf	readData@i,f
  1112  069B  3003               	movlw	3
  1113  069C  0276               	subwf	readData@i,w
  1114  069D  1C03               	skipc
  1115  069E  2E8C               	goto	l863
  1116  069F                     l143:	
  1117                           
  1118                           ;main.c: 184: }
  1119                           ;main.c: 185: LATCbits.LATC3 = 1;
  1120  069F  0022               	movlb	2	; select bank2
  1121  06A0  158E               	bsf	14,3	;volatile
  1122  06A1  0008               	return
  1123  06A2                     __end_of_readData:	
  1124                           
  1125                           	psect	text4
  1126  0740                     __ptext4:	
  1127 ;; *************** function _configureTX *****************
  1128 ;; Defined at:
  1129 ;;		line 107 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  write           2   10[COMMON] unsigned char [2]
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1
  1143 ;;      Params:         0       0       0
  1144 ;;      Locals:         2       0       0
  1145 ;;      Temps:          1       0       0
  1146 ;;      Totals:         3       0       0
  1147 ;;Total ram usage:        3 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		_SPI_writeArray
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _configureTX
  1159  0740                     _configureTX:	
  1160                           
  1161                           ;main.c: 120: LATCbits.LATC4 = 0;
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _configureTX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1165  0740  0022               	movlb	2	; select bank2
  1166  0741  120E               	bcf	14,4	;volatile
  1167                           
  1168                           ;main.c: 121: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  1169  0742  3006               	movlw	6
  1170  0743  00F9               	movwf	??_configureTX
  1171  0744  3030               	movlw	48
  1172  0745                     u247:	
  1173  0745  0B89               	decfsz	9,f
  1174  0746  2F45               	goto	u247
  1175  0747  0BF9               	decfsz	??_configureTX,f
  1176  0748  2F45               	goto	u247
  1177  0749  3200               	nop2
  1178                           
  1179                           ;main.c: 122: LATCbits.LATC3 = 1;
  1180  074A  0022               	movlb	2	; select bank2
  1181  074B  158E               	bsf	14,3	;volatile
  1182                           
  1183                           ;main.c: 123: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  1184  074C  3006               	movlw	6
  1185  074D  00F9               	movwf	??_configureTX
  1186  074E  3030               	movlw	48
  1187  074F                     u257:	
  1188  074F  0B89               	decfsz	9,f
  1189  0750  2F4F               	goto	u257
  1190  0751  0BF9               	decfsz	??_configureTX,f
  1191  0752  2F4F               	goto	u257
  1192  0753  3200               	nop2
  1193                           
  1194                           ;main.c: 124: uint8_t write[2];
  1195                           ;main.c: 125: write[0] = (0x00 & 0b00011111) | 0b00100000;
  1196  0754  3020               	movlw	32
  1197  0755  00F9               	movwf	??_configureTX
  1198  0756  0879               	movf	??_configureTX,w
  1199  0757  00FA               	movwf	configureTX@write
  1200                           
  1201                           ;main.c: 126: write[1] = 0b01001010;
  1202  0758  304A               	movlw	74
  1203  0759  00F9               	movwf	??_configureTX
  1204  075A  0879               	movf	??_configureTX,w
  1205  075B  00FB               	movwf	configureTX@write+1
  1206                           
  1207                           ;main.c: 129: SPI_writeArray(write, 2);
  1208  075C  3002               	movlw	2
  1209  075D  00F9               	movwf	??_configureTX
  1210  075E  0879               	movf	??_configureTX,w
  1211  075F  00F3               	movwf	SPI_writeArray@length
  1212  0760  307A               	movlw	(low (configureTX@write| 0))& (0+255)
  1213  0761  2667               	fcall	_SPI_writeArray
  1214                           
  1215                           ;main.c: 132: write[0] = (0x01 & 0b00011111) | 0b00100000;
  1216  0762  3021               	movlw	33
  1217  0763  00F9               	movwf	??_configureTX
  1218  0764  0879               	movf	??_configureTX,w
  1219  0765  00FA               	movwf	configureTX@write
  1220                           
  1221                           ;main.c: 133: write[1] = 0x01;
  1222  0766  01FB               	clrf	configureTX@write+1
  1223  0767  0AFB               	incf	configureTX@write+1,f
  1224                           
  1225                           ;main.c: 134: SPI_writeArray(write, 2);
  1226  0768  3002               	movlw	2
  1227  0769  00F9               	movwf	??_configureTX
  1228  076A  0879               	movf	??_configureTX,w
  1229  076B  00F3               	movwf	SPI_writeArray@length
  1230  076C  307A               	movlw	(low (configureTX@write| 0))& (0+255)
  1231  076D  2667               	fcall	_SPI_writeArray
  1232                           
  1233                           ;main.c: 136: write[0] = (0x02 & 0b00011111) | 0b00100000;
  1234  076E  3022               	movlw	34
  1235  076F  00F9               	movwf	??_configureTX
  1236  0770  0879               	movf	??_configureTX,w
  1237  0771  00FA               	movwf	configureTX@write
  1238                           
  1239                           ;main.c: 137: write[1] = 0b00000001;
  1240  0772  01FB               	clrf	configureTX@write+1
  1241  0773  0AFB               	incf	configureTX@write+1,f
  1242                           
  1243                           ;main.c: 138: SPI_writeArray(write, 2);
  1244  0774  3002               	movlw	2
  1245  0775  00F9               	movwf	??_configureTX
  1246  0776  0879               	movf	??_configureTX,w
  1247  0777  00F3               	movwf	SPI_writeArray@length
  1248  0778  307A               	movlw	(low (configureTX@write| 0))& (0+255)
  1249  0779  2667               	fcall	_SPI_writeArray
  1250                           
  1251                           ;main.c: 140: write[0] = (RX_PW_P[0] & 0b00011111) | 0b00100000;
  1252  077A  3014               	movlw	low (_RX_PW_P| (0+32768))
  1253  077B  0084               	movwf	4
  1254  077C  3086               	movlw	high (_RX_PW_P| (0+32768))
  1255  077D  0085               	movwf	5
  1256  077E  0800               	movf	0,w	;code access
  1257  077F  391F               	andlw	31
  1258  0780  3820               	iorlw	32
  1259  0781  00F9               	movwf	??_configureTX
  1260  0782  0879               	movf	??_configureTX,w
  1261  0783  00FA               	movwf	configureTX@write
  1262                           
  1263                           ;main.c: 141: write[1] = 3;
  1264  0784  3003               	movlw	3
  1265  0785  00F9               	movwf	??_configureTX
  1266  0786  0879               	movf	??_configureTX,w
  1267  0787  00FB               	movwf	configureTX@write+1
  1268                           
  1269                           ;main.c: 142: SPI_writeArray(write, 2);
  1270  0788  3002               	movlw	2
  1271  0789  00F9               	movwf	??_configureTX
  1272  078A  0879               	movf	??_configureTX,w
  1273  078B  00F3               	movwf	SPI_writeArray@length
  1274  078C  307A               	movlw	(low (configureTX@write| 0))& (0+255)
  1275  078D  2667               	fcall	_SPI_writeArray
  1276                           
  1277                           ;main.c: 144: write[0] = (0x03 & 0b00011111) | 0b00100000;
  1278  078E  3023               	movlw	35
  1279  078F  00F9               	movwf	??_configureTX
  1280  0790  0879               	movf	??_configureTX,w
  1281  0791  00FA               	movwf	configureTX@write
  1282                           
  1283                           ;main.c: 145: write[1] = 0b0000011;
  1284  0792  3003               	movlw	3
  1285  0793  00F9               	movwf	??_configureTX
  1286  0794  0879               	movf	??_configureTX,w
  1287  0795  00FB               	movwf	configureTX@write+1
  1288                           
  1289                           ;main.c: 146: SPI_writeArray(write, 2);
  1290  0796  3002               	movlw	2
  1291  0797  00F9               	movwf	??_configureTX
  1292  0798  0879               	movf	??_configureTX,w
  1293  0799  00F3               	movwf	SPI_writeArray@length
  1294  079A  307A               	movlw	(low (configureTX@write| 0))& (0+255)
  1295  079B  2667               	fcall	_SPI_writeArray
  1296  079C  0008               	return
  1297  079D                     __end_of_configureTX:	
  1298                           
  1299                           	psect	text5
  1300  0607                     __ptext5:	
  1301 ;; *************** function _configureReceiver *****************
  1302 ;; Defined at:
  1303 ;;		line 175 in file "main.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		None
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1
  1317 ;;      Params:         0       0       0
  1318 ;;      Locals:         0       0       0
  1319 ;;      Temps:          0       0       0
  1320 ;;      Totals:         0       0       0
  1321 ;;Total ram usage:        0 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_main
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           
  1331                           ;psect for function _configureReceiver
  1332  0607                     _configureReceiver:	
  1333                           
  1334                           ;main.c: 176: TRISAbits.TRISA4 = 1;
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in _configureReceiver: []
  1338  0607  0021               	movlb	1	; select bank1
  1339  0608  160C               	bsf	12,4	;volatile
  1340  0609  0008               	return
  1341  060A                     __end_of_configureReceiver:	
  1342                           
  1343                           	psect	text6
  1344  06E3                     __ptext6:	
  1345 ;; *************** function _configureRX *****************
  1346 ;; Defined at:
  1347 ;;		line 188 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  write           2   10[COMMON] unsigned char [2]
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1
  1361 ;;      Params:         0       0       0
  1362 ;;      Locals:         2       0       0
  1363 ;;      Temps:          1       0       0
  1364 ;;      Totals:         3       0       0
  1365 ;;Total ram usage:        3 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    2
  1368 ;; This function calls:
  1369 ;;		_SPI_writeArray
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _configureRX
  1377  06E3                     _configureRX:	
  1378                           
  1379                           ;main.c: 197: LATCbits.LATC4 = 0;
  1380                           
  1381                           ;incstack = 0
  1382                           ; Regs used in _configureRX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1383  06E3  0022               	movlb	2	; select bank2
  1384  06E4  120E               	bcf	14,4	;volatile
  1385                           
  1386                           ;main.c: 198: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  1387  06E5  3006               	movlw	6
  1388  06E6  00F9               	movwf	??_configureRX
  1389  06E7  3030               	movlw	48
  1390  06E8                     u267:	
  1391  06E8  0B89               	decfsz	9,f
  1392  06E9  2EE8               	goto	u267
  1393  06EA  0BF9               	decfsz	??_configureRX,f
  1394  06EB  2EE8               	goto	u267
  1395  06EC  3200               	nop2
  1396                           
  1397                           ;main.c: 199: LATCbits.LATC3 = 1;
  1398  06ED  0022               	movlb	2	; select bank2
  1399  06EE  158E               	bsf	14,3	;volatile
  1400                           
  1401                           ;main.c: 200: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  1402  06EF  3006               	movlw	6
  1403  06F0  00F9               	movwf	??_configureRX
  1404  06F1  3030               	movlw	48
  1405  06F2                     u277:	
  1406  06F2  0B89               	decfsz	9,f
  1407  06F3  2EF2               	goto	u277
  1408  06F4  0BF9               	decfsz	??_configureRX,f
  1409  06F5  2EF2               	goto	u277
  1410  06F6  3200               	nop2
  1411                           
  1412                           ;main.c: 201: uint8_t write[2];
  1413                           ;main.c: 202: write[0] = (0x00 & 0b00011111) | 0b00100000;
  1414  06F7  3020               	movlw	32
  1415  06F8  00F9               	movwf	??_configureRX
  1416  06F9  0879               	movf	??_configureRX,w
  1417  06FA  00FA               	movwf	configureRX@write
  1418                           
  1419                           ;main.c: 203: write[1] = 0b00111011;
  1420  06FB  303B               	movlw	59
  1421  06FC  00F9               	movwf	??_configureRX
  1422  06FD  0879               	movf	??_configureRX,w
  1423  06FE  00FB               	movwf	configureRX@write+1
  1424                           
  1425                           ;main.c: 204: SPI_writeArray(write, 2);
  1426  06FF  3002               	movlw	2
  1427  0700  00F9               	movwf	??_configureRX
  1428  0701  0879               	movf	??_configureRX,w
  1429  0702  00F3               	movwf	SPI_writeArray@length
  1430  0703  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1431  0704  2667               	fcall	_SPI_writeArray
  1432                           
  1433                           ;main.c: 207: write[0] = (0x01 & 0b00011111) | 0b00100000;
  1434  0705  3021               	movlw	33
  1435  0706  00F9               	movwf	??_configureRX
  1436  0707  0879               	movf	??_configureRX,w
  1437  0708  00FA               	movwf	configureRX@write
  1438                           
  1439                           ;main.c: 208: write[1] = 0b00000001;
  1440  0709  01FB               	clrf	configureRX@write+1
  1441  070A  0AFB               	incf	configureRX@write+1,f
  1442                           
  1443                           ;main.c: 209: SPI_writeArray(write, 2);
  1444  070B  3002               	movlw	2
  1445  070C  00F9               	movwf	??_configureRX
  1446  070D  0879               	movf	??_configureRX,w
  1447  070E  00F3               	movwf	SPI_writeArray@length
  1448  070F  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1449  0710  2667               	fcall	_SPI_writeArray
  1450                           
  1451                           ;main.c: 211: write[0] = (0x02 & 0b00011111) | 0b00100000;
  1452  0711  3022               	movlw	34
  1453  0712  00F9               	movwf	??_configureRX
  1454  0713  0879               	movf	??_configureRX,w
  1455  0714  00FA               	movwf	configureRX@write
  1456                           
  1457                           ;main.c: 212: write[1] = 0b00000001;
  1458  0715  01FB               	clrf	configureRX@write+1
  1459  0716  0AFB               	incf	configureRX@write+1,f
  1460                           
  1461                           ;main.c: 213: SPI_writeArray(write, 2);
  1462  0717  3002               	movlw	2
  1463  0718  00F9               	movwf	??_configureRX
  1464  0719  0879               	movf	??_configureRX,w
  1465  071A  00F3               	movwf	SPI_writeArray@length
  1466  071B  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1467  071C  2667               	fcall	_SPI_writeArray
  1468                           
  1469                           ;main.c: 215: write[0] = (RX_PW_P[0] & 0b00011111) | 0b00100000;
  1470  071D  3014               	movlw	low (_RX_PW_P| (0+32768))
  1471  071E  0084               	movwf	4
  1472  071F  3086               	movlw	high (_RX_PW_P| (0+32768))
  1473  0720  0085               	movwf	5
  1474  0721  0800               	movf	0,w	;code access
  1475  0722  391F               	andlw	31
  1476  0723  3820               	iorlw	32
  1477  0724  00F9               	movwf	??_configureRX
  1478  0725  0879               	movf	??_configureRX,w
  1479  0726  00FA               	movwf	configureRX@write
  1480                           
  1481                           ;main.c: 216: write[1] = 3;
  1482  0727  3003               	movlw	3
  1483  0728  00F9               	movwf	??_configureRX
  1484  0729  0879               	movf	??_configureRX,w
  1485  072A  00FB               	movwf	configureRX@write+1
  1486                           
  1487                           ;main.c: 217: SPI_writeArray(write, 2);
  1488  072B  3002               	movlw	2
  1489  072C  00F9               	movwf	??_configureRX
  1490  072D  0879               	movf	??_configureRX,w
  1491  072E  00F3               	movwf	SPI_writeArray@length
  1492  072F  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1493  0730  2667               	fcall	_SPI_writeArray
  1494                           
  1495                           ;main.c: 219: write[0] = (0x03 & 0b00011111) | 0b00100000;
  1496  0731  3023               	movlw	35
  1497  0732  00F9               	movwf	??_configureRX
  1498  0733  0879               	movf	??_configureRX,w
  1499  0734  00FA               	movwf	configureRX@write
  1500                           
  1501                           ;main.c: 220: write[1] = 0b0000011;
  1502  0735  3003               	movlw	3
  1503  0736  00F9               	movwf	??_configureRX
  1504  0737  0879               	movf	??_configureRX,w
  1505  0738  00FB               	movwf	configureRX@write+1
  1506                           
  1507                           ;main.c: 221: SPI_writeArray(write, 2);
  1508  0739  3002               	movlw	2
  1509  073A  00F9               	movwf	??_configureRX
  1510  073B  0879               	movf	??_configureRX,w
  1511  073C  00F3               	movwf	SPI_writeArray@length
  1512  073D  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1513  073E  2667               	fcall	_SPI_writeArray
  1514  073F  0008               	return
  1515  0740                     __end_of_configureRX:	
  1516                           
  1517                           	psect	text7
  1518  0667                     __ptext7:	
  1519 ;; *************** function _SPI_writeArray *****************
  1520 ;; Defined at:
  1521 ;;		line 51 in file "spi.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  data            1    wreg     PTR unsigned char 
  1524 ;;		 -> configureRX@write(2), transmitData@write(11), configureTX@write(2), resetIRQ@write(2), 
  1525 ;;  length          1    3[COMMON] unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  data            1    8[COMMON] PTR unsigned char 
  1528 ;;		 -> configureRX@write(2), transmitData@write(11), configureTX@write(2), resetIRQ@write(2), 
  1529 ;;  i               1    7[COMMON] unsigned char 
  1530 ;;  ret             1    6[COMMON] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      unsigned char 
  1533 ;; Registers used:
  1534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMMON   BANK0   BANK1
  1540 ;;      Params:         1       0       0
  1541 ;;      Locals:         3       0       0
  1542 ;;      Temps:          2       0       0
  1543 ;;      Totals:         6       0       0
  1544 ;;Total ram usage:        6 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    1
  1547 ;; This function calls:
  1548 ;;		_SPI_write_byte
  1549 ;; This function is called by:
  1550 ;;		_resetIRQ
  1551 ;;		_configureTX
  1552 ;;		_transmitData
  1553 ;;		_configureRX
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           
  1558                           ;psect for function _SPI_writeArray
  1559  0667                     _SPI_writeArray:	
  1560                           
  1561                           ;incstack = 0
  1562                           ; Regs used in _SPI_writeArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1563                           ;SPI_writeArray@data stored from wreg
  1564  0667  00F8               	movwf	SPI_writeArray@data
  1565                           
  1566                           ;spi.c: 52: LATCbits.LATC3 = 0;
  1567  0668  0022               	movlb	2	; select bank2
  1568  0669  118E               	bcf	14,3	;volatile
  1569                           
  1570                           ;spi.c: 53: uint8_t ret;
  1571                           ;spi.c: 54: for(uint8_t i = 0; i < length; ++i) {
  1572  066A  01F7               	clrf	SPI_writeArray@i
  1573  066B                     l749:	
  1574  066B  0873               	movf	SPI_writeArray@length,w
  1575  066C  0277               	subwf	SPI_writeArray@i,w
  1576  066D  1803               	btfsc	3,0
  1577  066E  2E7F               	goto	l49
  1578                           
  1579                           ;spi.c: 55: ret = SPI_write_byte(data[i]);
  1580  066F  0877               	movf	SPI_writeArray@i,w
  1581  0670  0778               	addwf	SPI_writeArray@data,w
  1582  0671  00F4               	movwf	??_SPI_writeArray
  1583  0672  0874               	movf	??_SPI_writeArray,w
  1584  0673  0086               	movwf	6
  1585  0674  0187               	clrf	7
  1586  0675  0801               	movf	1,w
  1587  0676  2646               	fcall	_SPI_write_byte
  1588  0677  00F5               	movwf	??_SPI_writeArray+1
  1589  0678  0875               	movf	??_SPI_writeArray+1,w
  1590  0679  00F6               	movwf	SPI_writeArray@ret
  1591  067A  3001               	movlw	1
  1592  067B  00F4               	movwf	??_SPI_writeArray
  1593  067C  0874               	movf	??_SPI_writeArray,w
  1594  067D  07F7               	addwf	SPI_writeArray@i,f
  1595  067E  2E6B               	goto	l749
  1596  067F                     l49:	
  1597                           
  1598                           ;spi.c: 56: }
  1599                           ;spi.c: 58: LATCbits.LATC3 = 1;
  1600  067F  0022               	movlb	2	; select bank2
  1601  0680  158E               	bsf	14,3	;volatile
  1602                           
  1603                           ;spi.c: 59: return ret;
  1604                           ;	Return value of _SPI_writeArray is never used
  1605  0681  0008               	return
  1606  0682                     __end_of_SPI_writeArray:	
  1607                           
  1608                           	psect	text8
  1609  0628                     __ptext8:	
  1610 ;; *************** function _SPI_read_byte *****************
  1611 ;; Defined at:
  1612 ;;		line 62 in file "spi.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  address         1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  address         1    4[COMMON] unsigned char 
  1617 ;;  ret             1    5[COMMON] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      unsigned char 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, pclath, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1
  1627 ;;      Params:         0       0       0
  1628 ;;      Locals:         2       0       0
  1629 ;;      Temps:          1       0       0
  1630 ;;      Totals:         3       0       0
  1631 ;;Total ram usage:        3 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    1
  1634 ;; This function calls:
  1635 ;;		_SPI_write_byte
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function _SPI_read_byte
  1643  0628                     _SPI_read_byte:	
  1644                           
  1645                           ;incstack = 0
  1646                           ; Regs used in _SPI_read_byte: [wreg+status,2+status,0+pclath+cstack]
  1647                           ;SPI_read_byte@address stored from wreg
  1648  0628  00F4               	movwf	SPI_read_byte@address
  1649                           
  1650                           ;spi.c: 63: LATCbits.LATC3 = 0;
  1651  0629  0022               	movlb	2	; select bank2
  1652  062A  118E               	bcf	14,3	;volatile
  1653                           
  1654                           ;spi.c: 64: SPI_write_byte((address & 0b00011111) | 0x00);
  1655  062B  0874               	movf	SPI_read_byte@address,w
  1656  062C  391F               	andlw	31
  1657  062D  2646               	fcall	_SPI_write_byte
  1658                           
  1659                           ;spi.c: 65: uint8_t ret = SPI_write_byte(0xFF);
  1660  062E  30FF               	movlw	255
  1661  062F  2646               	fcall	_SPI_write_byte
  1662  0630  00F3               	movwf	??_SPI_read_byte
  1663  0631  0873               	movf	??_SPI_read_byte,w
  1664  0632  00F5               	movwf	SPI_read_byte@ret
  1665                           
  1666                           ;spi.c: 66: LATCbits.LATC3 = 1;
  1667  0633  0022               	movlb	2	; select bank2
  1668  0634  158E               	bsf	14,3	;volatile
  1669                           
  1670                           ;spi.c: 67: return ret;
  1671  0635  0875               	movf	SPI_read_byte@ret,w
  1672  0636  0008               	return
  1673  0637                     __end_of_SPI_read_byte:	
  1674                           
  1675                           	psect	text9
  1676  0646                     __ptext9:	
  1677 ;; *************** function _SPI_write_byte *****************
  1678 ;; Defined at:
  1679 ;;		line 43 in file "spi.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  data            1    wreg     unsigned char 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  data            1    1[COMMON] unsigned char 
  1684 ;;  ret_data        1    2[COMMON] unsigned char 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      unsigned char 
  1687 ;; Registers used:
  1688 ;;		wreg
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMMON   BANK0   BANK1
  1694 ;;      Params:         0       0       0
  1695 ;;      Locals:         2       0       0
  1696 ;;      Temps:          1       0       0
  1697 ;;      Totals:         3       0       0
  1698 ;;Total ram usage:        3 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; This function calls:
  1701 ;;		Nothing
  1702 ;; This function is called by:
  1703 ;;		_SPI_writeArray
  1704 ;;		_SPI_read_byte
  1705 ;;		_transmitData
  1706 ;;		_readData
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _SPI_write_byte
  1712  0646                     _SPI_write_byte:	
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _SPI_write_byte: [wreg]
  1716                           ;SPI_write_byte@data stored from wreg
  1717  0646  00F1               	movwf	SPI_write_byte@data
  1718                           
  1719                           ;spi.c: 44: SSP1BUF = data;
  1720  0647  0871               	movf	SPI_write_byte@data,w
  1721  0648  0024               	movlb	4	; select bank4
  1722  0649  0091               	movwf	17	;volatile
  1723  064A                     l41:	
  1724                           ;spi.c: 45: while(!PIR1bits.SSP1IF);
  1725                           
  1726  064A  0020               	movlb	0	; select bank0
  1727  064B  1D91               	btfss	17,3	;volatile
  1728  064C  2E4A               	goto	l41
  1729                           
  1730                           ;spi.c: 46: uint8_t ret_data = SSP1BUF;
  1731  064D  0024               	movlb	4	; select bank4
  1732  064E  0811               	movf	17,w	;volatile
  1733  064F  00F0               	movwf	??_SPI_write_byte
  1734  0650  0870               	movf	??_SPI_write_byte,w
  1735  0651  00F2               	movwf	SPI_write_byte@ret_data
  1736                           
  1737                           ;spi.c: 47: PIR1bits.SSP1IF = 0;
  1738  0652  0020               	movlb	0	; select bank0
  1739  0653  1191               	bcf	17,3	;volatile
  1740                           
  1741                           ;spi.c: 48: return ret_data;
  1742  0654  0872               	movf	SPI_write_byte@ret_data,w
  1743  0655  0008               	return
  1744  0656                     __end_of_SPI_write_byte:	
  1745                           
  1746                           	psect	text10
  1747  061A                     __ptext10:	
  1748 ;; *************** function _SPI_init *****************
  1749 ;; Defined at:
  1750 ;;		line 32 in file "spi.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, status,2, status,0, pclath, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1
  1764 ;;      Params:         0       0       0
  1765 ;;      Locals:         0       0       0
  1766 ;;      Temps:          0       0       0
  1767 ;;      Totals:         0       0       0
  1768 ;;Total ram usage:        0 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    1
  1771 ;; This function calls:
  1772 ;;		_configIO
  1773 ;; This function is called by:
  1774 ;;		_main
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _SPI_init
  1780  061A                     _SPI_init:	
  1781                           
  1782                           ;spi.c: 33: SSP1CON1bits.SSPEN = 0;
  1783                           
  1784                           ;incstack = 0
  1785                           ; Regs used in _SPI_init: [wreg+status,2+status,0+pclath+cstack]
  1786  061A  0024               	movlb	4	; select bank4
  1787  061B  1295               	bcf	21,5	;volatile
  1788                           
  1789                           ;spi.c: 34: configIO();
  1790  061C  2656               	fcall	_configIO
  1791                           
  1792                           ;spi.c: 35: SSP1CON1bits.CKP = 0;
  1793  061D  0024               	movlb	4	; select bank4
  1794  061E  1215               	bcf	21,4	;volatile
  1795                           
  1796                           ;spi.c: 36: SSP1STATbits.CKE = 1;
  1797  061F  1714               	bsf	20,6	;volatile
  1798                           
  1799                           ;spi.c: 37: SSP1STATbits.SMP = 0;
  1800  0620  1394               	bcf	20,7	;volatile
  1801                           
  1802                           ;spi.c: 38: SSP1CON1bits.SSPM = 0b0000;
  1803  0621  30F0               	movlw	-16
  1804  0622  0595               	andwf	21,f	;volatile
  1805                           
  1806                           ;spi.c: 39: PIR1bits.SSP1IF = 0;
  1807  0623  0020               	movlb	0	; select bank0
  1808  0624  1191               	bcf	17,3	;volatile
  1809                           
  1810                           ;spi.c: 40: SSP1CON1bits.SSPEN = 1;
  1811  0625  0024               	movlb	4	; select bank4
  1812  0626  1695               	bsf	21,5	;volatile
  1813  0627  0008               	return
  1814  0628                     __end_of_SPI_init:	
  1815                           
  1816                           	psect	text11
  1817  0656                     __ptext11:	
  1818 ;; *************** function _configIO *****************
  1819 ;; Defined at:
  1820 ;;		line 18 in file "spi.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMMON   BANK0   BANK1
  1834 ;;      Params:         0       0       0
  1835 ;;      Locals:         0       0       0
  1836 ;;      Temps:          0       0       0
  1837 ;;      Totals:         0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_SPI_init
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           
  1848                           ;psect for function _configIO
  1849  0656                     _configIO:	
  1850                           
  1851                           ;spi.c: 19: TRISCbits.TRISC3 = 0;
  1852                           
  1853                           ;incstack = 0
  1854                           ; Regs used in _configIO: [wreg+status,2]
  1855  0656  0021               	movlb	1	; select bank1
  1856  0657  118E               	bcf	14,3	;volatile
  1857                           
  1858                           ;spi.c: 20: TRISCbits.TRISC0 = 0;
  1859  0658  100E               	bcf	14,0	;volatile
  1860                           
  1861                           ;spi.c: 21: TRISCbits.TRISC2 = 0;
  1862  0659  110E               	bcf	14,2	;volatile
  1863                           
  1864                           ;spi.c: 22: TRISCbits.TRISC1 = 1;
  1865  065A  148E               	bsf	14,1	;volatile
  1866                           
  1867                           ;spi.c: 23: TRISAbits.TRISA2 = 1;
  1868  065B  150C               	bsf	12,2	;volatile
  1869                           
  1870                           ;spi.c: 24: TRISCbits.TRISC4 = 0;
  1871  065C  120E               	bcf	14,4	;volatile
  1872                           
  1873                           ;spi.c: 26: OPTION_REGbits.nWPUEN = 0;
  1874  065D  1395               	bcf	21,7	;volatile
  1875                           
  1876                           ;spi.c: 27: WPUAbits.WPUA2 = 1;
  1877  065E  0024               	movlb	4	; select bank4
  1878  065F  150C               	bsf	12,2	;volatile
  1879                           
  1880                           ;spi.c: 28: APFCON = 0b00010000;
  1881  0660  3010               	movlw	16
  1882  0661  0022               	movlb	2	; select bank2
  1883  0662  009D               	movwf	29	;volatile
  1884                           
  1885                           ;spi.c: 29: ANSELA = 0x00;
  1886  0663  0023               	movlb	3	; select bank3
  1887  0664  018C               	clrf	12	;volatile
  1888                           
  1889                           ;spi.c: 30: ANSELC = 0x00;
  1890  0665  018E               	clrf	14	;volatile
  1891  0666  0008               	return
  1892  0667                     __end_of_configIO:	
  1893  007E                     btemp	set	126	;btemp
  1894  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    21
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      27
    BANK1            32      0       0

Pointer List with Targets:

    readData@buf	PTR unsigned char  size(1) Largest target is 3
		 -> main@buf(BANK0[3]), 

    transmitData@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@distancePacket(BANK0[3]), 

    SPI_writeArray@data	PTR unsigned char  size(1) Largest target is 11
		 -> configureRX@write(COMMON[2]), transmitData@write(BANK0[11]), configureTX@write(COMMON[2]), resetIRQ@write(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_transmitData
    _transmitData->_resetIRQ
    _resetIRQ->_SPI_writeArray
    _readData->_SPI_write_byte
    _configureTX->_SPI_writeArray
    _configureRX->_SPI_writeArray
    _SPI_writeArray->_SPI_write_byte
    _SPI_read_byte->_SPI_write_byte

Critical Paths under _main in BANK0

    _main->_transmitData

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    5730
                                             13 COMMON     1     1      0
                                             16 BANK0     11    11      0
                           _SPI_init
                      _SPI_read_byte
                        _configureRX
                  _configureReceiver
                        _configureTX
                           _readData
                       _transmitData
 ---------------------------------------------------------------------------------
 (1) _transmitData                                        17    16      1    2588
                                             12 COMMON     1     0      1
                                              0 BANK0     16    16      0
                     _SPI_writeArray
                     _SPI_write_byte
                           _resetIRQ
 ---------------------------------------------------------------------------------
 (2) _resetIRQ                                             3     3      0    1150
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (1) _readData                                             4     4      0     162
                                              3 COMMON     4     4      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (1) _configureTX                                          3     3      0    1338
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (1) _configureReceiver                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureRX                                          3     3      0    1338
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (3) _SPI_writeArray                                       6     5      1    1102
                                              3 COMMON     6     5      1
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (1) _SPI_read_byte                                        3     3      0      90
                                              3 COMMON     3     3      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (4) _SPI_write_byte                                       3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
                           _configIO
 ---------------------------------------------------------------------------------
 (2) _configIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _configIO
   _SPI_read_byte
     _SPI_write_byte
   _configureRX
     _SPI_writeArray
       _SPI_write_byte
   _configureReceiver
   _configureTX
     _SPI_writeArray
       _SPI_write_byte
   _readData
     _SPI_write_byte
   _transmitData
     _SPI_writeArray
       _SPI_write_byte
     _SPI_write_byte
     _resetIRQ
       _SPI_writeArray
         _SPI_write_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1B      1B       6       33.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Nov 26 22:23:40 2017

              ?_configureRX 0070                ?_configureTX 0070                 __CFG_CP$OFF 0000  
                        l41 064A                          l49 067F                 __CFG_LVP$ON 0000  
                       l113 07D1                         l132 06CF                         l116 07D9  
                       l143 069F                         l921 07C3                         l915 07B9  
                       l749 066B                         l863 068C                         l927 07DE  
                       l881 06C8                         l929 07E5                         l877 06A9  
                       l879 06C1                         u237 06CB                         u247 0745  
                       u257 074F                         u267 06E8                         u277 06F2  
              __CFG_BORV$LO 0000                         wreg 0009      __size_of_SPI_read_byte 000F  
              _transmitData 06A2             __end_of_TIMEOUT 0607                __CFG_WRT$OFF 0000  
                      _main 079D                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        btemp 007E                        start 0001  
           __end_of_TX_ADDR 0603             __end_of_RX_PW_P 061A               __CFG_MCLRE$ON 0000  
         transmitData@write 0022                       ?_main 0070               __CFG_WDTE$OFF 0000  
          __end_of_TOWER_ID 0604              __CFG_BOREN$OFF 0000            __end_of_SPI_init 0628  
                     status 0003                       wtemp0 007E             __initialization 07FE  
              __end_of_main 07FE               _SPI_read_byte 0628              __CFG_LPBOR$OFF 0000  
                    ??_main 007D                 readData@buf 0075                      _APFCON 011D  
                    _ANSELA 018C                      _ANSELC 018E           _configureReceiver 0607  
        ?_configureReceiver 0070              __CFG_PWRTE$OFF 0000            __end_of_configIO 0667  
            ?_SPI_read_byte 0070     __size_of_SPI_writeArray 001B         ??_configureReceiver 0070  
            __CFG_STVREN$ON 0000     __size_of_SPI_write_byte 0010            __end_of_readData 06A2  
      __size_of_configureRX 005D        __size_of_configureTX 005D               main@timeCount 0039  
          __end_of_resetIRQ 0646           __end_of_RX_ADDR_P 0614   __end_of_configureReceiver 060A  
   __end_of__initialization 07FE              __pcstackCOMMON 0070                   ?_SPI_init 0070  
            _OPTION_REGbits 0095            configureRX@write 007A            configureTX@write 007A  
           ??_SPI_read_byte 0073                  __pmaintext 079D                  ??_SPI_init 0070  
          SPI_read_byte@ret 0075                     _TIMEOUT 0605                     _SSP1BUF 0211  
                 ?_configIO 0070  __size_of_configureReceiver 0003                     _TX_ADDR 0602  
                   _RX_PW_P 0614                   ?_readData 0070                   ?_resetIRQ 0070  
        main@distancePacket 0036              _SPI_writeArray 0667              _SPI_write_byte 0646  
                   __ptext1 06A2                     __ptext2 0637                     __ptext3 0682  
                   __ptext4 0740                     __ptext5 0607                     __ptext6 06E3  
                   __ptext7 0667                     __ptext8 0628                     __ptext9 0646  
        __end_of_MY_ADDRESS 060E                  ??_configIO 0070                     main@buf 0030  
             transmitData@i 002F        end_of_initialization 07FE                  ??_readData 0073  
    __end_of_SPI_writeArray 0682          SPI_writeArray@data 0078                  ??_resetIRQ 0079  
    __end_of_SPI_write_byte 0656                   _PORTAbits 000C            __CFG_FOSC$INTOSC 0000  
                 _TRISAbits 008C                   _TRISCbits 008E                   _RX_ADDR_P 060E  
             resetIRQ@write 007A             ?_SPI_writeArray 0073             ?_SPI_write_byte 0070  
             ??_configureRX 0079               ??_configureTX 0079            transmitData@data 002D  
          transmitData@sreg 002E         start_initialization 07FE           __size_of_SPI_init 000E  
             ?_transmitData 007C         __end_of_configureRX 0740         __end_of_configureTX 079D  
                 ___latbits 0000               __pcstackBANK0 0020              ??_transmitData 0020  
         __size_of_configIO 0011           __size_of_readData 0020       __end_of_SPI_read_byte 0637  
        SPI_write_byte@data 0071           __size_of_resetIRQ 000F             SPI_writeArray@i 0077  
      __end_of_START_TIMING 0605                    _LATAbits 010C                    _LATCbits 010E  
         SPI_writeArray@ret 0076                    _PIR1bits 0011                 _configureRX 06E3  
               _configureTX 0740                    _TOWER_ID 0603                    _SPI_init 061A  
    SPI_write_byte@ret_data 0072                    _WPUAbits 020C             transmitData@len 007C  
          ??_SPI_writeArray 0074            ??_SPI_write_byte 0070                   readData@i 0076  
      __end_of_transmitData 06E3        SPI_read_byte@address 0074                    __ptext10 061A  
                  __ptext11 0656                _SSP1CON1bits 0215                    _configIO 0656  
      SPI_writeArray@length 0073                    _readData 0682               __size_of_main 0061  
                  _resetIRQ 0637                _SSP1STATbits 0214                    main@test 0033  
         __CFG_CLKOUTEN$OFF 0000                _START_TIMING 0604                  _OSCCONbits 0099  
             __pstringtext1 0614               __pstringtext2 060E               __pstringtext3 060A  
             __pstringtext4 0605               __pstringtext5 0604               __pstringtext6 0603  
             __pstringtext7 0602                  _MY_ADDRESS 060A       __size_of_transmitData 0041  
