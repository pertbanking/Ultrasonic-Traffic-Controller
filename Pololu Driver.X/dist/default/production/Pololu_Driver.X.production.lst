

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Nov 09 13:50:07 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.43
    26                           ; Generated 25/07/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F1503 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0095                     	;# 
    91  0096                     	;# 
    92  0097                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010E                     	;# 
   103  0111                     	;# 
   104  0112                     	;# 
   105  0113                     	;# 
   106  0114                     	;# 
   107  0115                     	;# 
   108  0116                     	;# 
   109  0117                     	;# 
   110  0118                     	;# 
   111  0119                     	;# 
   112  011D                     	;# 
   113  018C                     	;# 
   114  018E                     	;# 
   115  0191                     	;# 
   116  0191                     	;# 
   117  0192                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0197                     	;# 
   124  020C                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  0391                     	;# 
   141  0392                     	;# 
   142  0393                     	;# 
   143  0498                     	;# 
   144  0498                     	;# 
   145  0499                     	;# 
   146  049A                     	;# 
   147  049B                     	;# 
   148  049B                     	;# 
   149  049C                     	;# 
   150  049D                     	;# 
   151  049E                     	;# 
   152  049F                     	;# 
   153  0611                     	;# 
   154  0612                     	;# 
   155  0613                     	;# 
   156  0613                     	;# 
   157  0614                     	;# 
   158  0615                     	;# 
   159  0616                     	;# 
   160  0616                     	;# 
   161  0617                     	;# 
   162  0618                     	;# 
   163  0619                     	;# 
   164  0619                     	;# 
   165  061A                     	;# 
   166  061B                     	;# 
   167  061C                     	;# 
   168  061C                     	;# 
   169  0691                     	;# 
   170  0692                     	;# 
   171  0693                     	;# 
   172  0694                     	;# 
   173  0695                     	;# 
   174  0F0F                     	;# 
   175  0F10                     	;# 
   176  0F11                     	;# 
   177  0F12                     	;# 
   178  0F13                     	;# 
   179  0F14                     	;# 
   180  0F15                     	;# 
   181  0F16                     	;# 
   182  0F17                     	;# 
   183  0F18                     	;# 
   184  0F19                     	;# 
   185  0F1A                     	;# 
   186  0F1B                     	;# 
   187  0F1C                     	;# 
   188  0F1D                     	;# 
   189  0F1E                     	;# 
   190  0F1F                     	;# 
   191  0FE3                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE9                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEF                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  010E                     	;# 
   247  0111                     	;# 
   248  0112                     	;# 
   249  0113                     	;# 
   250  0114                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018E                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  0197                     	;# 
   268  020C                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0391                     	;# 
   285  0392                     	;# 
   286  0393                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0613                     	;# 
   301  0614                     	;# 
   302  0615                     	;# 
   303  0616                     	;# 
   304  0616                     	;# 
   305  0617                     	;# 
   306  0618                     	;# 
   307  0619                     	;# 
   308  0619                     	;# 
   309  061A                     	;# 
   310  061B                     	;# 
   311  061C                     	;# 
   312  061C                     	;# 
   313  0691                     	;# 
   314  0692                     	;# 
   315  0693                     	;# 
   316  0694                     	;# 
   317  0695                     	;# 
   318  0F0F                     	;# 
   319  0F10                     	;# 
   320  0F11                     	;# 
   321  0F12                     	;# 
   322  0F13                     	;# 
   323  0F14                     	;# 
   324  0F15                     	;# 
   325  0F16                     	;# 
   326  0F17                     	;# 
   327  0F18                     	;# 
   328  0F19                     	;# 
   329  0F1A                     	;# 
   330  0F1B                     	;# 
   331  0F1C                     	;# 
   332  0F1D                     	;# 
   333  0F1E                     	;# 
   334  0F1F                     	;# 
   335  0FE3                     	;# 
   336  0FE4                     	;# 
   337  0FE5                     	;# 
   338  0FE6                     	;# 
   339  0FE7                     	;# 
   340  0FE8                     	;# 
   341  0FE9                     	;# 
   342  0FEA                     	;# 
   343  0FEB                     	;# 
   344  0FED                     	;# 
   345  0FEE                     	;# 
   346  0FEF                     	;# 
   347  0000                     	;# 
   348  0001                     	;# 
   349  0002                     	;# 
   350  0003                     	;# 
   351  0004                     	;# 
   352  0005                     	;# 
   353  0006                     	;# 
   354  0007                     	;# 
   355  0008                     	;# 
   356  0009                     	;# 
   357  000A                     	;# 
   358  000B                     	;# 
   359  000C                     	;# 
   360  000E                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008E                     	;# 
   375  0091                     	;# 
   376  0092                     	;# 
   377  0093                     	;# 
   378  0095                     	;# 
   379  0096                     	;# 
   380  0097                     	;# 
   381  0099                     	;# 
   382  009A                     	;# 
   383  009B                     	;# 
   384  009B                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010E                     	;# 
   391  0111                     	;# 
   392  0112                     	;# 
   393  0113                     	;# 
   394  0114                     	;# 
   395  0115                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  0118                     	;# 
   399  0119                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018E                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0197                     	;# 
   412  020C                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0391                     	;# 
   429  0392                     	;# 
   430  0393                     	;# 
   431  0498                     	;# 
   432  0498                     	;# 
   433  0499                     	;# 
   434  049A                     	;# 
   435  049B                     	;# 
   436  049B                     	;# 
   437  049C                     	;# 
   438  049D                     	;# 
   439  049E                     	;# 
   440  049F                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  0691                     	;# 
   458  0692                     	;# 
   459  0693                     	;# 
   460  0694                     	;# 
   461  0695                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0FE3                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491                           
   492                           	psect	stringtext1
   493  0653                     __pstringtext1:	
   494  0653                     _RX_PW_P:	
   495  0653  3411               	retlw	17
   496  0654  3412               	retlw	18
   497  0655  3413               	retlw	19
   498  0656  3414               	retlw	20
   499  0657  3415               	retlw	21
   500  0658  3416               	retlw	22
   501  0659                     __end_of_RX_PW_P:	
   502                           
   503                           	psect	stringtext2
   504  064D                     __pstringtext2:	
   505  064D                     _RX_ADDR_P:	
   506  064D  340A               	retlw	10
   507  064E  340B               	retlw	11
   508  064F  340C               	retlw	12
   509  0650  340D               	retlw	13
   510  0651  340E               	retlw	14
   511  0652  340F               	retlw	15
   512  0653                     __end_of_RX_ADDR_P:	
   513                           
   514                           	psect	stringtext3
   515  0647                     __pstringtext3:	
   516  0647                     _TX_ADDR:	
   517  0647  3410               	retlw	16
   518  0648                     __end_of_TX_ADDR:	
   519  0011                     _PIR1bits	set	17
   520  000C                     _PORTAbits	set	12
   521  0095                     _OPTION_REGbits	set	149
   522  008C                     _TRISAbits	set	140
   523  0099                     _OSCCONbits	set	153
   524  008E                     _TRISCbits	set	142
   525  011D                     _APFCON	set	285
   526  010C                     _LATAbits	set	268
   527  010E                     _LATCbits	set	270
   528  018E                     _ANSELC	set	398
   529  018C                     _ANSELA	set	396
   530  0211                     _SSP1BUF	set	529
   531  0214                     _SSP1STATbits	set	532
   532  0215                     _SSP1CON1bits	set	533
   533  020C                     _WPUAbits	set	524
   534                           
   535                           ; #config settings
   536  0000                     
   537                           	psect	cinit
   538  07FE                     start_initialization:	
   539  07FE                     __initialization:	
   540  07FE                     end_of_initialization:	
   541                           ;End of C runtime variable initialization code
   542                           
   543  07FE                     __end_of__initialization:	
   544  07FE  0020               	movlb	0
   545  07FF  2F9B               	ljmp	_main	;jump to C main() function
   546                           
   547                           	psect	cstackCOMMON
   548  0070                     __pcstackCOMMON:	
   549  0070                     ?_uartWriteByte:	
   550  0070                     ??_uartWriteByte:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_SPI_init:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ??_SPI_init:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_configureRX:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_SPI_read_byte:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_readData:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_resetIRQ:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_SPI_write_byte:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ??_SPI_write_byte:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_uartWritePacket:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_craftPacket:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_initUart:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ??_initUart:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_main:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_configIO:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ??_configIO:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     craftPacket@y:	
   599                           ; 1 bytes @ 0x0
   600                           
   601                           
   602                           ; 1 bytes @ 0x0
   603  0070                     	ds	1
   604  0071                     uartWriteByte@dat:	
   605  0071                     craftPacket@packet:	
   606                           ; 1 bytes @ 0x1
   607                           
   608  0071                     SPI_write_byte@data:	
   609                           ; 1 bytes @ 0x1
   610                           
   611                           
   612                           ; 1 bytes @ 0x1
   613  0071                     	ds	1
   614  0072                     ??_craftPacket:	
   615  0072                     uartWriteByte@b:	
   616                           ; 1 bytes @ 0x2
   617                           
   618  0072                     SPI_write_byte@ret_data:	
   619                           ; 1 bytes @ 0x2
   620                           
   621                           
   622                           ; 1 bytes @ 0x2
   623  0072                     	ds	1
   624  0073                     ??_SPI_read_byte:	
   625  0073                     ??_readData:	
   626                           ; 1 bytes @ 0x3
   627                           
   628  0073                     ?_SPI_writeArray:	
   629                           ; 1 bytes @ 0x3
   630                           
   631  0073                     ??_uartWritePacket:	
   632                           ; 1 bytes @ 0x3
   633                           
   634  0073                     craftPacket@x:	
   635                           ; 1 bytes @ 0x3
   636                           
   637  0073                     SPI_writeArray@length:	
   638                           ; 1 bytes @ 0x3
   639                           
   640                           
   641                           ; 1 bytes @ 0x3
   642  0073                     	ds	1
   643  0074                     ??_SPI_writeArray:	
   644  0074                     uartWritePacket@packet:	
   645                           ; 1 bytes @ 0x4
   646                           
   647  0074                     readData@ret:	
   648                           ; 1 bytes @ 0x4
   649                           
   650  0074                     SPI_read_byte@address:	
   651                           ; 1 bytes @ 0x4
   652                           
   653                           
   654                           ; 1 bytes @ 0x4
   655  0074                     	ds	1
   656  0075                     uartWritePacket@i:	
   657  0075                     SPI_read_byte@ret:	
   658                           ; 1 bytes @ 0x5
   659                           
   660                           
   661                           ; 1 bytes @ 0x5
   662  0075                     	ds	1
   663  0076                     SPI_writeArray@ret:	
   664                           
   665                           ; 1 bytes @ 0x6
   666  0076                     	ds	1
   667  0077                     SPI_writeArray@i:	
   668                           
   669                           ; 1 bytes @ 0x7
   670  0077                     	ds	1
   671  0078                     SPI_writeArray@data:	
   672                           
   673                           ; 1 bytes @ 0x8
   674  0078                     	ds	1
   675  0079                     ??_configureRX:	
   676  0079                     ??_resetIRQ:	
   677                           ; 1 bytes @ 0x9
   678                           
   679                           
   680                           ; 1 bytes @ 0x9
   681  0079                     	ds	1
   682  007A                     configureRX@write:	
   683  007A                     resetIRQ@write:	
   684                           ; 2 bytes @ 0xA
   685                           
   686                           
   687                           ; 2 bytes @ 0xA
   688  007A                     	ds	2
   689  007C                     ??_main:	
   690                           
   691                           ; 1 bytes @ 0xC
   692  007C                     	ds	2
   693                           
   694                           	psect	cstackBANK0
   695  0020                     __pcstackBANK0:	
   696  0020                     main@packetMove:	
   697                           
   698                           ; 4 bytes @ 0x0
   699  0020                     	ds	4
   700  0024                     main@packetStop:	
   701                           
   702                           ; 4 bytes @ 0x4
   703  0024                     	ds	4
   704  0028                     main@data:	
   705                           
   706                           ; 1 bytes @ 0x8
   707  0028                     	ds	1
   708                           
   709                           	psect	maintext
   710  079B                     __pmaintext:	
   711 ;;
   712 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   713 ;;
   714 ;; *************** function _main *****************
   715 ;; Defined at:
   716 ;;		line 38 in file "main.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;		None
   719 ;; Auto vars:     Size  Location     Type
   720 ;;  data            1    8[BANK0 ] unsigned char 
   721 ;;  packetStop      4    4[BANK0 ] unsigned char [4]
   722 ;;  packetMove      4    0[BANK0 ] unsigned char [4]
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : B1F/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1
   732 ;;      Params:         0       0       0
   733 ;;      Locals:         0       9       0
   734 ;;      Temps:          2       0       0
   735 ;;      Totals:         2       9       0
   736 ;;Total ram usage:       11 bytes
   737 ;; Hardware stack levels required when called:    3
   738 ;; This function calls:
   739 ;;		_SPI_init
   740 ;;		_SPI_read_byte
   741 ;;		_configureRX
   742 ;;		_craftPacket
   743 ;;		_initUart
   744 ;;		_readData
   745 ;;		_resetIRQ
   746 ;;		_uartWritePacket
   747 ;; This function is called by:
   748 ;;		Startup code after reset
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _main
   754  079B                     _main:	
   755                           
   756                           ;main.c: 41: OSCCONbits.IRCF = 0xF;
   757                           
   758                           ;incstack = 0
   759                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   760  079B  3078               	movlw	120
   761  079C  0021               	movlb	1	; select bank1
   762  079D  0499               	iorwf	25,f	;volatile
   763                           
   764                           ;main.c: 42: TRISAbits.TRISA1 = 0;
   765  079E  108C               	bcf	12,1	;volatile
   766                           
   767                           ;main.c: 44: initUart();
   768  079F  2648               	fcall	_initUart
   769                           
   770                           ;main.c: 45: SPI_init();
   771  07A0  2666               	fcall	_SPI_init
   772                           
   773                           ;main.c: 47: uint8_t packetMove[4];
   774                           ;main.c: 48: craftPacket(5, 5, packetMove);
   775  07A1  3005               	movlw	5
   776  07A2  00FC               	movwf	??_main
   777  07A3  087C               	movf	??_main,w
   778  07A4  00F0               	movwf	craftPacket@y
   779  07A5  3020               	movlw	(low (main@packetMove| 0))& (0+255)
   780  07A6  00FD               	movwf	??_main+1
   781  07A7  087D               	movf	??_main+1,w
   782  07A8  00F1               	movwf	craftPacket@packet
   783  07A9  3005               	movlw	5
   784  07AA  270E               	fcall	_craftPacket
   785                           
   786                           ;main.c: 50: uint8_t packetStop[4];
   787                           ;main.c: 51: craftPacket(0, 0, packetStop);
   788  07AB  01F0               	clrf	craftPacket@y
   789  07AC  3024               	movlw	(low (main@packetStop| 0))& (0+255)
   790  07AD  00FC               	movwf	??_main
   791  07AE  087C               	movf	??_main,w
   792  07AF  00F1               	movwf	craftPacket@packet
   793  07B0  3000               	movlw	0
   794  07B1  270E               	fcall	_craftPacket
   795                           
   796                           ;main.c: 53: LATAbits.LATA1 = 0;
   797  07B2  0022               	movlb	2	; select bank2
   798  07B3  108C               	bcf	12,1	;volatile
   799                           
   800                           ;main.c: 54: configureRX();
   801  07B4  2741               	fcall	_configureRX
   802                           
   803                           ;main.c: 59: if(SPI_read_byte(0x00) == 0b00111011) {
   804  07B5  3000               	movlw	0
   805  07B6  2674               	fcall	_SPI_read_byte
   806  07B7  3A3B               	xorlw	59
   807  07B8  1D03               	skipz
   808  07B9  2FE6               	goto	l949
   809                           
   810                           ;main.c: 60: LATAbits.LATA1 = !LATAbits.LATA1;
   811  07BA  1003               	clrc
   812  07BB  0022               	movlb	2	; select bank2
   813  07BC  1C8C               	btfss	12,1	;volatile
   814  07BD  1403               	setc
   815  07BE  1C03               	btfss	3,0
   816  07BF  2FC3               	goto	u310
   817  07C0  0022               	movlb	2	; select bank2
   818  07C1  148C               	bsf	12,1	;volatile
   819  07C2  2FC5               	goto	l945
   820  07C3                     u310:	
   821  07C3  0022               	movlb	2	; select bank2
   822  07C4  108C               	bcf	12,1	;volatile
   823  07C5                     l945:	
   824                           
   825                           ;main.c: 61: _delay((unsigned long)((500)*(16000000UL/4000.0)));
   826  07C5  300B               	movlw	11
   827  07C6  00FD               	movwf	??_main+1
   828  07C7  3026               	movlw	38
   829  07C8  00FC               	movwf	??_main
   830  07C9  305E               	movlw	94
   831  07CA                     u397:	
   832  07CA  0B89               	decfsz	9,f
   833  07CB  2FCA               	goto	u397
   834  07CC  0BFC               	decfsz	??_main,f
   835  07CD  2FCA               	goto	u397
   836  07CE  0BFD               	decfsz	??_main+1,f
   837  07CF  2FCA               	goto	u397
   838                           
   839                           ;main.c: 62: LATAbits.LATA1 = !LATAbits.LATA1;
   840  07D0  1003               	clrc
   841  07D1  0022               	movlb	2	; select bank2
   842  07D2  1C8C               	btfss	12,1	;volatile
   843  07D3  1403               	setc
   844  07D4  1C03               	btfss	3,0
   845  07D5  2FD9               	goto	u330
   846  07D6  0022               	movlb	2	; select bank2
   847  07D7  148C               	bsf	12,1	;volatile
   848  07D8  2FDB               	goto	u344
   849  07D9                     u330:	
   850  07D9  0022               	movlb	2	; select bank2
   851  07DA  108C               	bcf	12,1	;volatile
   852  07DB                     u344:	
   853                           
   854                           ;main.c: 63: _delay((unsigned long)((500)*(16000000UL/4000.0)));
   855  07DB  300B               	movlw	11
   856  07DC  00FD               	movwf	??_main+1
   857  07DD  3026               	movlw	38
   858  07DE  00FC               	movwf	??_main
   859  07DF  305E               	movlw	94
   860  07E0                     u407:	
   861  07E0  0B89               	decfsz	9,f
   862  07E1  2FE0               	goto	u407
   863  07E2  0BFC               	decfsz	??_main,f
   864  07E3  2FE0               	goto	u407
   865  07E4  0BFD               	decfsz	??_main+1,f
   866  07E5  2FE0               	goto	u407
   867  07E6                     l949:	
   868                           ;main.c: 64: }
   869                           ;main.c: 68: while(1) {
   870                           
   871                           
   872                           ;main.c: 69: LATCbits.LATC4 = 1;
   873  07E6  0022               	movlb	2	; select bank2
   874  07E7  160E               	bsf	14,4	;volatile
   875  07E8                     l75:	
   876                           ;main.c: 70: while(PORTAbits.RA2);
   877                           
   878  07E8  0020               	movlb	0	; select bank0
   879  07E9  190C               	btfsc	12,2	;volatile
   880  07EA  2FE8               	goto	l75
   881                           
   882                           ;main.c: 71: LATCbits.LATC4 = 0;
   883  07EB  0022               	movlb	2	; select bank2
   884  07EC  120E               	bcf	14,4	;volatile
   885                           
   886                           ;main.c: 72: uint8_t data = readData();
   887  07ED  2659               	fcall	_readData
   888  07EE  00FC               	movwf	??_main
   889  07EF  087C               	movf	??_main,w
   890  07F0  0020               	movlb	0	; select bank0
   891  07F1  00A8               	movwf	main@data
   892                           
   893                           ;main.c: 73: resetIRQ();
   894  07F2  2683               	fcall	_resetIRQ
   895                           
   896                           ;main.c: 80: if(data == 0xcf) uartWritePacket(packetMove);
   897  07F3  30CF               	movlw	207
   898  07F4  0020               	movlb	0	; select bank0
   899  07F5  0628               	xorwf	main@data,w
   900  07F6  1D03               	btfss	3,2
   901  07F7  2FFB               	goto	l959
   902  07F8  3020               	movlw	(low (main@packetMove| 0))& (0+255)
   903  07F9  26B3               	fcall	_uartWritePacket
   904  07FA  2FE6               	goto	l949
   905  07FB                     l959:	
   906                           
   907                           ;main.c: 81: else uartWritePacket(packetStop);
   908  07FB  3024               	movlw	(low (main@packetStop| 0))& (0+255)
   909  07FC  26B3               	fcall	_uartWritePacket
   910  07FD  2FE6               	goto	l949
   911  07FE                     __end_of_main:	
   912                           ;main.c: 82: }
   913                           ;main.c: 111: return;
   914                           
   915                           
   916                           	psect	text1
   917  06B3                     __ptext1:	
   918 ;; *************** function _uartWritePacket *****************
   919 ;; Defined at:
   920 ;;		line 5 in file "pololu_cmd.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  packet          1    wreg     PTR unsigned char 
   923 ;;		 -> main@packetStop(4), main@packetMove(4), 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  packet          1    4[COMMON] PTR unsigned char 
   926 ;;		 -> main@packetStop(4), main@packetMove(4), 
   927 ;;  i               1    5[COMMON] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1
   937 ;;      Params:         0       0       0
   938 ;;      Locals:         2       0       0
   939 ;;      Temps:          1       0       0
   940 ;;      Totals:         3       0       0
   941 ;;Total ram usage:        3 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    1
   944 ;; This function calls:
   945 ;;		_uartWriteByte
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _uartWritePacket
   953  06B3                     _uartWritePacket:	
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _uartWritePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   957                           ;uartWritePacket@packet stored from wreg
   958  06B3  00F4               	movwf	uartWritePacket@packet
   959                           
   960                           ;pololu_cmd.c: 6: for(uint8_t i = 0; i < 4; ++i) {
   961  06B4  01F5               	clrf	uartWritePacket@i
   962  06B5                     L1:	
   963  06B5  3004               	movlw	4
   964  06B6  0275               	subwf	uartWritePacket@i,w
   965  06B7  1803               	btfsc	3,0
   966  06B8  0008               	return
   967                           
   968                           ;pololu_cmd.c: 7: uartWriteByte(packet[i]);
   969  06B9  0875               	movf	uartWritePacket@i,w
   970  06BA  0774               	addwf	uartWritePacket@packet,w
   971  06BB  00F3               	movwf	??_uartWritePacket
   972  06BC  0873               	movf	??_uartWritePacket,w
   973  06BD  0086               	movwf	6
   974  06BE  0187               	clrf	7
   975  06BF  0801               	movf	1,w
   976  06C0  26E1               	fcall	_uartWriteByte
   977  06C1  3001               	movlw	1
   978  06C2  00F3               	movwf	??_uartWritePacket
   979  06C3  0873               	movf	??_uartWritePacket,w
   980  06C4  07F5               	addwf	uartWritePacket@i,f
   981  06C5  2EB5               	goto	L1
   982  06C6                     __end_of_uartWritePacket:	
   983                           
   984                           	psect	text2
   985  06E1                     __ptext2:	
   986 ;; *************** function _uartWriteByte *****************
   987 ;; Defined at:
   988 ;;		line 11 in file "pololu_cmd.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  dat             1    wreg     unsigned char 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  dat             1    1[COMMON] unsigned char 
   993 ;;  b               1    2[COMMON] unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1
  1003 ;;      Params:         0       0       0
  1004 ;;      Locals:         2       0       0
  1005 ;;      Temps:          1       0       0
  1006 ;;      Totals:         3       0       0
  1007 ;;Total ram usage:        3 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_uartWritePacket
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _uartWriteByte
  1018  06E1                     _uartWriteByte:	
  1019                           
  1020                           ;incstack = 0
  1021                           ; Regs used in _uartWriteByte: [wreg+status,2+status,0]
  1022                           ;uartWriteByte@dat stored from wreg
  1023  06E1  00F1               	movwf	uartWriteByte@dat
  1024                           
  1025                           ;pololu_cmd.c: 12: LATCbits.LATC5 = 0;
  1026  06E2  0022               	movlb	2	; select bank2
  1027  06E3  128E               	bcf	14,5	;volatile
  1028                           
  1029                           ;pololu_cmd.c: 13: _delay((unsigned long)(((1000000/9600))*(16000000UL/4000000.0)));
  1030  06E4  308A               	movlw	138
  1031  06E5                     u417:	
  1032  06E5  0B89               	decfsz	9,f
  1033  06E6  2EE5               	goto	u417
  1034  06E7  3200               	nop2
  1035                           
  1036                           ;pololu_cmd.c: 14: for(uint8_t b = 0; b < 8; ++b) {
  1037  06E8  01F2               	clrf	uartWriteByte@b
  1038  06E9  3008               	movlw	8
  1039  06EA  0272               	subwf	uartWriteByte@b,w
  1040  06EB  1803               	btfsc	3,0
  1041  06EC  2F07               	goto	l17
  1042  06ED                     l791:	
  1043                           
  1044                           ;pololu_cmd.c: 15: if(((dat >> b) & 0x01) == 0x01) {
  1045  06ED  0871               	movf	uartWriteByte@dat,w
  1046  06EE  00F0               	movwf	??_uartWriteByte
  1047  06EF  0A72               	incf	uartWriteByte@b,w
  1048  06F0  2EF2               	goto	u224
  1049  06F1                     u225:	
  1050  06F1  36F0               	lsrf	??_uartWriteByte,f
  1051  06F2                     u224:	
  1052  06F2  0B89               	decfsz	9,f
  1053  06F3  2EF1               	goto	u225
  1054  06F4  1C70               	btfss	??_uartWriteByte,0
  1055  06F5  2EF9               	goto	l18
  1056                           
  1057                           ;pololu_cmd.c: 16: LATCbits.LATC5 = 1;
  1058  06F6  0022               	movlb	2	; select bank2
  1059  06F7  168E               	bsf	14,5	;volatile
  1060                           
  1061                           ;pololu_cmd.c: 17: } else {
  1062  06F8  2EFB               	goto	l795
  1063  06F9                     l18:	
  1064                           
  1065                           ;pololu_cmd.c: 18: LATCbits.LATC5 = 0;
  1066  06F9  0022               	movlb	2	; select bank2
  1067  06FA  128E               	bcf	14,5	;volatile
  1068  06FB                     l795:	
  1069                           
  1070                           ;pololu_cmd.c: 19: }
  1071                           ;pololu_cmd.c: 20: _delay((unsigned long)(((1000000/9600))*(16000000UL/4000000.0)));
  1072  06FB  308A               	movlw	138
  1073  06FC                     u427:	
  1074  06FC  0B89               	decfsz	9,f
  1075  06FD  2EFC               	goto	u427
  1076  06FE  3200               	nop2
  1077  06FF  3001               	movlw	1
  1078  0700  00F0               	movwf	??_uartWriteByte
  1079  0701  0870               	movf	??_uartWriteByte,w
  1080  0702  07F2               	addwf	uartWriteByte@b,f
  1081  0703  3008               	movlw	8
  1082  0704  0272               	subwf	uartWriteByte@b,w
  1083  0705  1C03               	skipc
  1084  0706  2EED               	goto	l791
  1085  0707                     l17:	
  1086                           
  1087                           ;pololu_cmd.c: 21: }
  1088                           ;pololu_cmd.c: 22: LATCbits.LATC5 = 1;
  1089  0707  0022               	movlb	2	; select bank2
  1090  0708  168E               	bsf	14,5	;volatile
  1091                           
  1092                           ;pololu_cmd.c: 23: _delay((unsigned long)(((1000000/9600))*(16000000UL/4000000.0)));
  1093  0709  308A               	movlw	138
  1094  070A                     u437:	
  1095  070A  0B89               	decfsz	9,f
  1096  070B  2F0A               	goto	u437
  1097  070C  3200               	nop2
  1098  070D  0008               	return
  1099  070E                     __end_of_uartWriteByte:	
  1100                           
  1101                           	psect	text3
  1102  0683                     __ptext3:	
  1103 ;; *************** function _resetIRQ *****************
  1104 ;; Defined at:
  1105 ;;		line 70 in file "spi.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  write           2   10[COMMON] unsigned char [2]
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1
  1119 ;;      Params:         0       0       0
  1120 ;;      Locals:         2       0       0
  1121 ;;      Temps:          1       0       0
  1122 ;;      Totals:         3       0       0
  1123 ;;Total ram usage:        3 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    2
  1126 ;; This function calls:
  1127 ;;		_SPI_writeArray
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;;		_transmitData
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _resetIRQ
  1136  0683                     _resetIRQ:	
  1137                           
  1138                           ;spi.c: 71: uint8_t write[2];
  1139                           ;spi.c: 72: write[0] = (0x07 & 0b00011111) | 0b00100000;
  1140                           
  1141                           ;incstack = 0
  1142                           ; Regs used in _resetIRQ: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1143  0683  3027               	movlw	39
  1144  0684  00F9               	movwf	??_resetIRQ
  1145  0685  0879               	movf	??_resetIRQ,w
  1146  0686  00FA               	movwf	resetIRQ@write
  1147                           
  1148                           ;spi.c: 73: write[1] = 0b01110000;
  1149  0687  3070               	movlw	112
  1150  0688  00F9               	movwf	??_resetIRQ
  1151  0689  0879               	movf	??_resetIRQ,w
  1152  068A  00FB               	movwf	resetIRQ@write+1
  1153                           
  1154                           ;spi.c: 74: SPI_writeArray(write, 2);
  1155  068B  3002               	movlw	2
  1156  068C  00F9               	movwf	??_resetIRQ
  1157  068D  0879               	movf	??_resetIRQ,w
  1158  068E  00F3               	movwf	SPI_writeArray@length
  1159  068F  307A               	movlw	(low (resetIRQ@write| 0))& (0+255)
  1160  0690  26C6               	fcall	_SPI_writeArray
  1161  0691  0008               	return
  1162  0692                     __end_of_resetIRQ:	
  1163                           
  1164                           	psect	text4
  1165  0659                     __ptext4:	
  1166 ;; *************** function _readData *****************
  1167 ;; Defined at:
  1168 ;;		line 114 in file "main.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;		None
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  ret             1    4[COMMON] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      unsigned char 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0, pclath, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMMON   BANK0   BANK1
  1182 ;;      Params:         0       0       0
  1183 ;;      Locals:         1       0       0
  1184 ;;      Temps:          1       0       0
  1185 ;;      Totals:         2       0       0
  1186 ;;Total ram usage:        2 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    1
  1189 ;; This function calls:
  1190 ;;		_SPI_write_byte
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           
  1197                           ;psect for function _readData
  1198  0659                     _readData:	
  1199                           
  1200                           ;main.c: 115: LATCbits.LATC3 = 0;
  1201                           
  1202                           ;incstack = 0
  1203                           ; Regs used in _readData: [wreg+status,2+status,0+pclath+cstack]
  1204  0659  0022               	movlb	2	; select bank2
  1205  065A  118E               	bcf	14,3	;volatile
  1206                           
  1207                           ;main.c: 116: SPI_write_byte(0b01100001);
  1208  065B  3061               	movlw	97
  1209  065C  2692               	fcall	_SPI_write_byte
  1210                           
  1211                           ;main.c: 117: uint8_t ret = SPI_write_byte(0xFF);
  1212  065D  30FF               	movlw	255
  1213  065E  2692               	fcall	_SPI_write_byte
  1214  065F  00F3               	movwf	??_readData
  1215  0660  0873               	movf	??_readData,w
  1216  0661  00F4               	movwf	readData@ret
  1217                           
  1218                           ;main.c: 118: LATCbits.LATC3 = 1;
  1219  0662  0022               	movlb	2	; select bank2
  1220  0663  158E               	bsf	14,3	;volatile
  1221                           
  1222                           ;main.c: 119: return ret;
  1223  0664  0874               	movf	readData@ret,w
  1224  0665  0008               	return
  1225  0666                     __end_of_readData:	
  1226                           
  1227                           	psect	text5
  1228  0648                     __ptext5:	
  1229 ;; *************** function _initUart *****************
  1230 ;; Defined at:
  1231 ;;		line 35 in file "pololu_cmd.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		None
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1
  1245 ;;      Params:         0       0       0
  1246 ;;      Locals:         0       0       0
  1247 ;;      Temps:          0       0       0
  1248 ;;      Totals:         0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _initUart
  1260  0648                     _initUart:	
  1261                           
  1262                           ;pololu_cmd.c: 36: TRISCbits.TRISC5 = 0;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _initUart: []
  1266  0648  0021               	movlb	1	; select bank1
  1267  0649  128E               	bcf	14,5	;volatile
  1268                           
  1269                           ;pololu_cmd.c: 37: LATCbits.LATC5 = 1;
  1270  064A  0022               	movlb	2	; select bank2
  1271  064B  168E               	bsf	14,5	;volatile
  1272  064C  0008               	return
  1273  064D                     __end_of_initUart:	
  1274                           
  1275                           	psect	text6
  1276  070E                     __ptext6:	
  1277 ;; *************** function _craftPacket *****************
  1278 ;; Defined at:
  1279 ;;		line 26 in file "pololu_cmd.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  x               1    wreg     unsigned char 
  1282 ;;  y               1    0[COMMON] unsigned char 
  1283 ;;  packet          1    1[COMMON] PTR unsigned char 
  1284 ;;		 -> main@packetStop(4), main@packetMove(4), 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  x               1    3[COMMON] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1
  1296 ;;      Params:         2       0       0
  1297 ;;      Locals:         1       0       0
  1298 ;;      Temps:          1       0       0
  1299 ;;      Totals:         4       0       0
  1300 ;;Total ram usage:        4 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _craftPacket
  1311  070E                     _craftPacket:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _craftPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  1315                           ;craftPacket@x stored from wreg
  1316  070E  00F3               	movwf	craftPacket@x
  1317                           
  1318                           ;pololu_cmd.c: 27: packet[0] = 12;
  1319  070F  300C               	movlw	12
  1320  0710  00F2               	movwf	??_craftPacket
  1321  0711  0871               	movf	craftPacket@packet,w
  1322  0712  0086               	movwf	6
  1323  0713  0187               	clrf	7
  1324  0714  0872               	movf	??_craftPacket,w
  1325  0715  0081               	movwf	1
  1326                           
  1327                           ;pololu_cmd.c: 28: packet[3] = 11;
  1328  0716  300B               	movlw	11
  1329  0717  00F2               	movwf	??_craftPacket
  1330  0718  0871               	movf	craftPacket@packet,w
  1331  0719  3E03               	addlw	3
  1332  071A  0086               	movwf	6
  1333  071B  0187               	clrf	7
  1334  071C  0872               	movf	??_craftPacket,w
  1335  071D  0081               	movwf	1
  1336                           
  1337                           ;pololu_cmd.c: 29: if(x > 10) packet[1] = 10;
  1338  071E  300B               	movlw	11
  1339  071F  0273               	subwf	craftPacket@x,w
  1340  0720  1C03               	skipc
  1341  0721  2F24               	goto	l841
  1342  0722  300A               	movlw	10
  1343  0723  2F25               	goto	L2
  1344  0724                     l841:	
  1345                           
  1346                           ;pololu_cmd.c: 30: else packet[1] = x;
  1347  0724  0873               	movf	craftPacket@x,w
  1348  0725                     L2:	
  1349  0725  00F2               	movwf	??_craftPacket
  1350  0726  0A71               	incf	craftPacket@packet,w
  1351  0727  0086               	movwf	6
  1352  0728  0187               	clrf	7
  1353  0729  0872               	movf	??_craftPacket,w
  1354  072A  0081               	movwf	1
  1355                           
  1356                           ;pololu_cmd.c: 31: if(y > 10) packet[2] = 10;
  1357  072B  300B               	movlw	11
  1358  072C  0270               	subwf	craftPacket@y,w
  1359  072D  1C03               	skipc
  1360  072E  2F38               	goto	l847
  1361  072F  300A               	movlw	10
  1362  0730  00F2               	movwf	??_craftPacket
  1363  0731  0871               	movf	craftPacket@packet,w
  1364  0732  3E02               	addlw	2
  1365  0733  0086               	movwf	6
  1366  0734  0187               	clrf	7
  1367  0735  0872               	movf	??_craftPacket,w
  1368  0736  0081               	movwf	1
  1369  0737  0008               	return
  1370  0738                     l847:	
  1371                           
  1372                           ;pololu_cmd.c: 32: else packet[2] = y;
  1373  0738  0870               	movf	craftPacket@y,w
  1374  0739  00F2               	movwf	??_craftPacket
  1375  073A  0871               	movf	craftPacket@packet,w
  1376  073B  3E02               	addlw	2
  1377  073C  0086               	movwf	6
  1378  073D  0187               	clrf	7
  1379  073E  0872               	movf	??_craftPacket,w
  1380  073F  0081               	movwf	1
  1381  0740  0008               	return
  1382  0741                     __end_of_craftPacket:	
  1383                           
  1384                           	psect	text7
  1385  0741                     __ptext7:	
  1386 ;; *************** function _configureRX *****************
  1387 ;; Defined at:
  1388 ;;		line 122 in file "main.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  write           2   10[COMMON] unsigned char [2]
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMMON   BANK0   BANK1
  1402 ;;      Params:         0       0       0
  1403 ;;      Locals:         2       0       0
  1404 ;;      Temps:          1       0       0
  1405 ;;      Totals:         3       0       0
  1406 ;;Total ram usage:        3 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    2
  1409 ;; This function calls:
  1410 ;;		_SPI_writeArray
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _configureRX
  1418  0741                     _configureRX:	
  1419                           
  1420                           ;main.c: 131: LATCbits.LATC4 = 0;
  1421                           
  1422                           ;incstack = 0
  1423                           ; Regs used in _configureRX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1424  0741  0022               	movlb	2	; select bank2
  1425  0742  120E               	bcf	14,4	;volatile
  1426                           
  1427                           ;main.c: 132: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  1428  0743  3006               	movlw	6
  1429  0744  00F9               	movwf	??_configureRX
  1430  0745  3030               	movlw	48
  1431  0746                     u447:	
  1432  0746  0B89               	decfsz	9,f
  1433  0747  2F46               	goto	u447
  1434  0748  0BF9               	decfsz	??_configureRX,f
  1435  0749  2F46               	goto	u447
  1436  074A  3200               	nop2
  1437                           
  1438                           ;main.c: 133: LATCbits.LATC3 = 1;
  1439  074B  0022               	movlb	2	; select bank2
  1440  074C  158E               	bsf	14,3	;volatile
  1441                           
  1442                           ;main.c: 134: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1443  074D  3034               	movlw	52
  1444  074E  00F9               	movwf	??_configureRX
  1445  074F  30F2               	movlw	242
  1446  0750                     u457:	
  1447  0750  0B89               	decfsz	9,f
  1448  0751  2F50               	goto	u457
  1449  0752  0BF9               	decfsz	??_configureRX,f
  1450  0753  2F50               	goto	u457
  1451                           
  1452                           ;main.c: 135: uint8_t write[2];
  1453                           ;main.c: 136: write[0] = (0x00 & 0b00011111) | 0b00100000;
  1454  0754  3020               	movlw	32
  1455  0755  00F9               	movwf	??_configureRX
  1456  0756  0879               	movf	??_configureRX,w
  1457  0757  00FA               	movwf	configureRX@write
  1458                           
  1459                           ;main.c: 137: write[1] = 0b00111011;
  1460  0758  303B               	movlw	59
  1461  0759  00F9               	movwf	??_configureRX
  1462  075A  0879               	movf	??_configureRX,w
  1463  075B  00FB               	movwf	configureRX@write+1
  1464                           
  1465                           ;main.c: 138: SPI_writeArray(write, 2);
  1466  075C  3002               	movlw	2
  1467  075D  00F9               	movwf	??_configureRX
  1468  075E  0879               	movf	??_configureRX,w
  1469  075F  00F3               	movwf	SPI_writeArray@length
  1470  0760  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1471  0761  26C6               	fcall	_SPI_writeArray
  1472                           
  1473                           ;main.c: 141: write[0] = (0x01 & 0b00011111) | 0b00100000;
  1474  0762  3021               	movlw	33
  1475  0763  00F9               	movwf	??_configureRX
  1476  0764  0879               	movf	??_configureRX,w
  1477  0765  00FA               	movwf	configureRX@write
  1478                           
  1479                           ;main.c: 142: write[1] = 0b00000001;
  1480  0766  01FB               	clrf	configureRX@write+1
  1481  0767  0AFB               	incf	configureRX@write+1,f
  1482                           
  1483                           ;main.c: 143: SPI_writeArray(write, 2);
  1484  0768  3002               	movlw	2
  1485  0769  00F9               	movwf	??_configureRX
  1486  076A  0879               	movf	??_configureRX,w
  1487  076B  00F3               	movwf	SPI_writeArray@length
  1488  076C  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1489  076D  26C6               	fcall	_SPI_writeArray
  1490                           
  1491                           ;main.c: 145: write[0] = (0x02 & 0b00011111) | 0b00100000;
  1492  076E  3022               	movlw	34
  1493  076F  00F9               	movwf	??_configureRX
  1494  0770  0879               	movf	??_configureRX,w
  1495  0771  00FA               	movwf	configureRX@write
  1496                           
  1497                           ;main.c: 146: write[1] = 0b00000001;
  1498  0772  01FB               	clrf	configureRX@write+1
  1499  0773  0AFB               	incf	configureRX@write+1,f
  1500                           
  1501                           ;main.c: 147: SPI_writeArray(write, 2);
  1502  0774  3002               	movlw	2
  1503  0775  00F9               	movwf	??_configureRX
  1504  0776  0879               	movf	??_configureRX,w
  1505  0777  00F3               	movwf	SPI_writeArray@length
  1506  0778  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1507  0779  26C6               	fcall	_SPI_writeArray
  1508                           
  1509                           ;main.c: 149: write[0] = (RX_PW_P[0] & 0b00011111) | 0b00100000;
  1510  077A  3053               	movlw	low (_RX_PW_P| (0+32768))
  1511  077B  0084               	movwf	4
  1512  077C  3086               	movlw	high (_RX_PW_P| (0+32768))
  1513  077D  0085               	movwf	5
  1514  077E  0800               	movf	0,w	;code access
  1515  077F  391F               	andlw	31
  1516  0780  3820               	iorlw	32
  1517  0781  00F9               	movwf	??_configureRX
  1518  0782  0879               	movf	??_configureRX,w
  1519  0783  00FA               	movwf	configureRX@write
  1520                           
  1521                           ;main.c: 150: write[1] = 0b00000001;
  1522  0784  01FB               	clrf	configureRX@write+1
  1523  0785  0AFB               	incf	configureRX@write+1,f
  1524                           
  1525                           ;main.c: 151: SPI_writeArray(write, 2);
  1526  0786  3002               	movlw	2
  1527  0787  00F9               	movwf	??_configureRX
  1528  0788  0879               	movf	??_configureRX,w
  1529  0789  00F3               	movwf	SPI_writeArray@length
  1530  078A  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1531  078B  26C6               	fcall	_SPI_writeArray
  1532                           
  1533                           ;main.c: 153: write[0] = (0x03 & 0b00011111) | 0b00100000;
  1534  078C  3023               	movlw	35
  1535  078D  00F9               	movwf	??_configureRX
  1536  078E  0879               	movf	??_configureRX,w
  1537  078F  00FA               	movwf	configureRX@write
  1538                           
  1539                           ;main.c: 154: write[1] = 0b0000011;
  1540  0790  3003               	movlw	3
  1541  0791  00F9               	movwf	??_configureRX
  1542  0792  0879               	movf	??_configureRX,w
  1543  0793  00FB               	movwf	configureRX@write+1
  1544                           
  1545                           ;main.c: 155: SPI_writeArray(write, 2);
  1546  0794  3002               	movlw	2
  1547  0795  00F9               	movwf	??_configureRX
  1548  0796  0879               	movf	??_configureRX,w
  1549  0797  00F3               	movwf	SPI_writeArray@length
  1550  0798  307A               	movlw	(low (configureRX@write| 0))& (0+255)
  1551  0799  26C6               	fcall	_SPI_writeArray
  1552  079A  0008               	return
  1553  079B                     __end_of_configureRX:	
  1554                           
  1555                           	psect	text8
  1556  06C6                     __ptext8:	
  1557 ;; *************** function _SPI_writeArray *****************
  1558 ;; Defined at:
  1559 ;;		line 51 in file "spi.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  data            1    wreg     PTR unsigned char 
  1562 ;;		 -> resetIRQ@write(2), transmitData@write(2), configureTX@write(2), configureRX@write(2), 
  1563 ;;  length          1    3[COMMON] unsigned char 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  data            1    8[COMMON] PTR unsigned char 
  1566 ;;		 -> resetIRQ@write(2), transmitData@write(2), configureTX@write(2), configureRX@write(2), 
  1567 ;;  i               1    7[COMMON] unsigned char 
  1568 ;;  ret             1    6[COMMON] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      unsigned char 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1
  1578 ;;      Params:         1       0       0
  1579 ;;      Locals:         3       0       0
  1580 ;;      Temps:          2       0       0
  1581 ;;      Totals:         6       0       0
  1582 ;;Total ram usage:        6 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		_SPI_write_byte
  1587 ;; This function is called by:
  1588 ;;		_configureRX
  1589 ;;		_resetIRQ
  1590 ;;		_configureTX
  1591 ;;		_transmitData
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           
  1596                           ;psect for function _SPI_writeArray
  1597  06C6                     _SPI_writeArray:	
  1598                           
  1599                           ;incstack = 0
  1600                           ; Regs used in _SPI_writeArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1601                           ;SPI_writeArray@data stored from wreg
  1602  06C6  00F8               	movwf	SPI_writeArray@data
  1603                           
  1604                           ;spi.c: 52: LATCbits.LATC3 = 0;
  1605  06C7  0022               	movlb	2	; select bank2
  1606  06C8  118E               	bcf	14,3	;volatile
  1607                           
  1608                           ;spi.c: 53: uint8_t ret;
  1609                           ;spi.c: 54: for(uint8_t i = 0; i < length; ++i) {
  1610  06C9  01F7               	clrf	SPI_writeArray@i
  1611  06CA                     l811:	
  1612  06CA  0873               	movf	SPI_writeArray@length,w
  1613  06CB  0277               	subwf	SPI_writeArray@i,w
  1614  06CC  1803               	btfsc	3,0
  1615  06CD  2EDE               	goto	l146
  1616                           
  1617                           ;spi.c: 55: ret = SPI_write_byte(data[i]);
  1618  06CE  0877               	movf	SPI_writeArray@i,w
  1619  06CF  0778               	addwf	SPI_writeArray@data,w
  1620  06D0  00F4               	movwf	??_SPI_writeArray
  1621  06D1  0874               	movf	??_SPI_writeArray,w
  1622  06D2  0086               	movwf	6
  1623  06D3  0187               	clrf	7
  1624  06D4  0801               	movf	1,w
  1625  06D5  2692               	fcall	_SPI_write_byte
  1626  06D6  00F5               	movwf	??_SPI_writeArray+1
  1627  06D7  0875               	movf	??_SPI_writeArray+1,w
  1628  06D8  00F6               	movwf	SPI_writeArray@ret
  1629  06D9  3001               	movlw	1
  1630  06DA  00F4               	movwf	??_SPI_writeArray
  1631  06DB  0874               	movf	??_SPI_writeArray,w
  1632  06DC  07F7               	addwf	SPI_writeArray@i,f
  1633  06DD  2ECA               	goto	l811
  1634  06DE                     l146:	
  1635                           
  1636                           ;spi.c: 56: }
  1637                           ;spi.c: 58: LATCbits.LATC3 = 1;
  1638  06DE  0022               	movlb	2	; select bank2
  1639  06DF  158E               	bsf	14,3	;volatile
  1640                           
  1641                           ;spi.c: 59: return ret;
  1642                           ;	Return value of _SPI_writeArray is never used
  1643  06E0  0008               	return
  1644  06E1                     __end_of_SPI_writeArray:	
  1645                           
  1646                           	psect	text9
  1647  0674                     __ptext9:	
  1648 ;; *************** function _SPI_read_byte *****************
  1649 ;; Defined at:
  1650 ;;		line 62 in file "spi.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  address         1    wreg     unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  address         1    4[COMMON] unsigned char 
  1655 ;;  ret             1    5[COMMON] unsigned char 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      unsigned char 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0, pclath, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1
  1665 ;;      Params:         0       0       0
  1666 ;;      Locals:         2       0       0
  1667 ;;      Temps:          1       0       0
  1668 ;;      Totals:         3       0       0
  1669 ;;Total ram usage:        3 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		_SPI_write_byte
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _SPI_read_byte
  1681  0674                     _SPI_read_byte:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _SPI_read_byte: [wreg+status,2+status,0+pclath+cstack]
  1685                           ;SPI_read_byte@address stored from wreg
  1686  0674  00F4               	movwf	SPI_read_byte@address
  1687                           
  1688                           ;spi.c: 63: LATCbits.LATC3 = 0;
  1689  0675  0022               	movlb	2	; select bank2
  1690  0676  118E               	bcf	14,3	;volatile
  1691                           
  1692                           ;spi.c: 64: SPI_write_byte((address & 0b00011111) | 0x00);
  1693  0677  0874               	movf	SPI_read_byte@address,w
  1694  0678  391F               	andlw	31
  1695  0679  2692               	fcall	_SPI_write_byte
  1696                           
  1697                           ;spi.c: 65: uint8_t ret = SPI_write_byte(0xFF);
  1698  067A  30FF               	movlw	255
  1699  067B  2692               	fcall	_SPI_write_byte
  1700  067C  00F3               	movwf	??_SPI_read_byte
  1701  067D  0873               	movf	??_SPI_read_byte,w
  1702  067E  00F5               	movwf	SPI_read_byte@ret
  1703                           
  1704                           ;spi.c: 66: LATCbits.LATC3 = 1;
  1705  067F  0022               	movlb	2	; select bank2
  1706  0680  158E               	bsf	14,3	;volatile
  1707                           
  1708                           ;spi.c: 67: return ret;
  1709  0681  0875               	movf	SPI_read_byte@ret,w
  1710  0682  0008               	return
  1711  0683                     __end_of_SPI_read_byte:	
  1712                           
  1713                           	psect	text10
  1714  0692                     __ptext10:	
  1715 ;; *************** function _SPI_write_byte *****************
  1716 ;; Defined at:
  1717 ;;		line 43 in file "spi.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  data            1    wreg     unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  data            1    1[COMMON] unsigned char 
  1722 ;;  ret_data        1    2[COMMON] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      unsigned char 
  1725 ;; Registers used:
  1726 ;;		wreg
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1
  1732 ;;      Params:         0       0       0
  1733 ;;      Locals:         2       0       0
  1734 ;;      Temps:          1       0       0
  1735 ;;      Totals:         3       0       0
  1736 ;;Total ram usage:        3 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_readData
  1742 ;;		_SPI_writeArray
  1743 ;;		_SPI_read_byte
  1744 ;;		_transmitData
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           
  1749                           ;psect for function _SPI_write_byte
  1750  0692                     _SPI_write_byte:	
  1751                           
  1752                           ;incstack = 0
  1753                           ; Regs used in _SPI_write_byte: [wreg]
  1754                           ;SPI_write_byte@data stored from wreg
  1755  0692  00F1               	movwf	SPI_write_byte@data
  1756                           
  1757                           ;spi.c: 44: SSP1BUF = data;
  1758  0693  0871               	movf	SPI_write_byte@data,w
  1759  0694  0024               	movlb	4	; select bank4
  1760  0695  0091               	movwf	17	;volatile
  1761  0696                     l138:	
  1762                           ;spi.c: 45: while(!PIR1bits.SSP1IF);
  1763                           
  1764  0696  0020               	movlb	0	; select bank0
  1765  0697  1D91               	btfss	17,3	;volatile
  1766  0698  2E96               	goto	l138
  1767                           
  1768                           ;spi.c: 46: uint8_t ret_data = SSP1BUF;
  1769  0699  0024               	movlb	4	; select bank4
  1770  069A  0811               	movf	17,w	;volatile
  1771  069B  00F0               	movwf	??_SPI_write_byte
  1772  069C  0870               	movf	??_SPI_write_byte,w
  1773  069D  00F2               	movwf	SPI_write_byte@ret_data
  1774                           
  1775                           ;spi.c: 47: PIR1bits.SSP1IF = 0;
  1776  069E  0020               	movlb	0	; select bank0
  1777  069F  1191               	bcf	17,3	;volatile
  1778                           
  1779                           ;spi.c: 48: return ret_data;
  1780  06A0  0872               	movf	SPI_write_byte@ret_data,w
  1781  06A1  0008               	return
  1782  06A2                     __end_of_SPI_write_byte:	
  1783                           
  1784                           	psect	text11
  1785  0666                     __ptext11:	
  1786 ;; *************** function _SPI_init *****************
  1787 ;; Defined at:
  1788 ;;		line 32 in file "spi.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, pclath, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       0       0
  1804 ;;      Temps:          0       0       0
  1805 ;;      Totals:         0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    1
  1809 ;; This function calls:
  1810 ;;		_configIO
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _SPI_init
  1818  0666                     _SPI_init:	
  1819                           
  1820                           ;spi.c: 33: SSP1CON1bits.SSPEN = 0;
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _SPI_init: [wreg+status,2+status,0+pclath+cstack]
  1824  0666  0024               	movlb	4	; select bank4
  1825  0667  1295               	bcf	21,5	;volatile
  1826                           
  1827                           ;spi.c: 34: configIO();
  1828  0668  26A2               	fcall	_configIO
  1829                           
  1830                           ;spi.c: 35: SSP1CON1bits.CKP = 0;
  1831  0669  0024               	movlb	4	; select bank4
  1832  066A  1215               	bcf	21,4	;volatile
  1833                           
  1834                           ;spi.c: 36: SSP1STATbits.CKE = 1;
  1835  066B  1714               	bsf	20,6	;volatile
  1836                           
  1837                           ;spi.c: 37: SSP1STATbits.SMP = 0;
  1838  066C  1394               	bcf	20,7	;volatile
  1839                           
  1840                           ;spi.c: 38: SSP1CON1bits.SSPM = 0b0000;
  1841  066D  30F0               	movlw	-16
  1842  066E  0595               	andwf	21,f	;volatile
  1843                           
  1844                           ;spi.c: 39: PIR1bits.SSP1IF = 0;
  1845  066F  0020               	movlb	0	; select bank0
  1846  0670  1191               	bcf	17,3	;volatile
  1847                           
  1848                           ;spi.c: 40: SSP1CON1bits.SSPEN = 1;
  1849  0671  0024               	movlb	4	; select bank4
  1850  0672  1695               	bsf	21,5	;volatile
  1851  0673  0008               	return
  1852  0674                     __end_of_SPI_init:	
  1853                           
  1854                           	psect	text12
  1855  06A2                     __ptext12:	
  1856 ;; *************** function _configIO *****************
  1857 ;; Defined at:
  1858 ;;		line 18 in file "spi.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1
  1872 ;;      Params:         0       0       0
  1873 ;;      Locals:         0       0       0
  1874 ;;      Temps:          0       0       0
  1875 ;;      Totals:         0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; This function calls:
  1879 ;;		Nothing
  1880 ;; This function is called by:
  1881 ;;		_SPI_init
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           
  1886                           ;psect for function _configIO
  1887  06A2                     _configIO:	
  1888                           
  1889                           ;spi.c: 19: TRISCbits.TRISC3 = 0;
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in _configIO: [wreg+status,2]
  1893  06A2  0021               	movlb	1	; select bank1
  1894  06A3  118E               	bcf	14,3	;volatile
  1895                           
  1896                           ;spi.c: 20: TRISCbits.TRISC0 = 0;
  1897  06A4  100E               	bcf	14,0	;volatile
  1898                           
  1899                           ;spi.c: 21: TRISCbits.TRISC2 = 0;
  1900  06A5  110E               	bcf	14,2	;volatile
  1901                           
  1902                           ;spi.c: 22: TRISCbits.TRISC1 = 1;
  1903  06A6  148E               	bsf	14,1	;volatile
  1904                           
  1905                           ;spi.c: 23: TRISAbits.TRISA2 = 1;
  1906  06A7  150C               	bsf	12,2	;volatile
  1907                           
  1908                           ;spi.c: 24: TRISCbits.TRISC4 = 0;
  1909  06A8  120E               	bcf	14,4	;volatile
  1910                           
  1911                           ;spi.c: 26: OPTION_REGbits.nWPUEN = 0;
  1912  06A9  1395               	bcf	21,7	;volatile
  1913                           
  1914                           ;spi.c: 27: WPUAbits.WPUA2 = 1;
  1915  06AA  0024               	movlb	4	; select bank4
  1916  06AB  150C               	bsf	12,2	;volatile
  1917                           
  1918                           ;spi.c: 28: APFCON = 0b00010000;
  1919  06AC  3010               	movlw	16
  1920  06AD  0022               	movlb	2	; select bank2
  1921  06AE  009D               	movwf	29	;volatile
  1922                           
  1923                           ;spi.c: 29: ANSELA = 0x00;
  1924  06AF  0023               	movlb	3	; select bank3
  1925  06B0  018C               	clrf	12	;volatile
  1926                           
  1927                           ;spi.c: 30: ANSELC = 0x00;
  1928  06B1  018E               	clrf	14	;volatile
  1929  06B2  0008               	return
  1930  06B3                     __end_of_configIO:	
  1931  007E                     btemp	set	126	;btemp
  1932  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    13
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9       9
    BANK1            32      0       0

Pointer List with Targets:

    SPI_writeArray@data	PTR unsigned char  size(1) Largest target is 2
		 -> resetIRQ@write(COMMON[2]), transmitData@write(COMMON[2]), configureTX@write(COMMON[2]), configureRX@write(COMMON[2]), 

    craftPacket@packet	PTR unsigned char  size(1) Largest target is 4
		 -> main@packetStop(BANK0[4]), main@packetMove(BANK0[4]), 

    uartWritePacket@packet	PTR unsigned char  size(1) Largest target is 4
		 -> main@packetStop(BANK0[4]), main@packetMove(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_configureRX
    _main->_resetIRQ
    _uartWritePacket->_uartWriteByte
    _resetIRQ->_SPI_writeArray
    _readData->_SPI_write_byte
    _configureRX->_SPI_writeArray
    _SPI_writeArray->_SPI_write_byte
    _SPI_read_byte->_SPI_write_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3835
                                             12 COMMON     2     2      0
                                              0 BANK0      9     9      0
                           _SPI_init
                      _SPI_read_byte
                        _configureRX
                        _craftPacket
                           _initUart
                           _readData
                           _resetIRQ
                    _uartWritePacket
 ---------------------------------------------------------------------------------
 (1) _uartWritePacket                                      3     3      0     240
                                              3 COMMON     3     3      0
                      _uartWriteByte
 ---------------------------------------------------------------------------------
 (2) _uartWriteByte                                        3     3      0      90
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIRQ                                             3     3      0    1318
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (1) _readData                                             2     2      0      68
                                              3 COMMON     2     2      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _craftPacket                                          4     2      2     476
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _configureRX                                          3     3      0    1506
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (2) _SPI_writeArray                                       6     5      1    1270
                                              3 COMMON     6     5      1
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (1) _SPI_read_byte                                        3     3      0      90
                                              3 COMMON     3     3      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (3) _SPI_write_byte                                       3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
                           _configIO
 ---------------------------------------------------------------------------------
 (2) _configIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _configIO
   _SPI_read_byte
     _SPI_write_byte
   _configureRX
     _SPI_writeArray
       _SPI_write_byte
   _craftPacket
   _initUart
   _readData
     _SPI_write_byte
   _resetIRQ
     _SPI_writeArray
       _SPI_write_byte
   _uartWritePacket
     _uartWriteByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9       9       6       11.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Nov 09 13:50:07 2017

            ?_configureRX 0070           ??_uartWriteByte 0070               __CFG_CP$OFF 0000  
                      l17 0707                        l18 06F9                        l75 07E8  
       ??_uartWritePacket 0073               __CFG_LVP$ON 0000                       l138 0696  
                     l146 06DE                       l811 06CA                       l841 0724  
                     l847 0738                       l791 06ED                       l945 07C5  
                     l795 06FB                       l949 07E6                       l959 07FB  
       craftPacket@packet 0071                       u310 07C3                       u224 06F2  
                     u225 06F1                       u330 07D9                       u407 07E0  
                     u344 07DB                       u417 06E5                       u427 06FC  
                     u437 070A                       u447 0746                       u457 0750  
                     u397 07CA              __CFG_BORV$LO 0000                       wreg 0009  
  __size_of_SPI_read_byte 000F              __CFG_WRT$OFF 0000                      _main 079B  
                    fsr0h 0005                      fsr1h 0007                      indf0 0000  
                    fsr0l 0004                      indf1 0001                      fsr1l 0006  
                    btemp 007E                      start 0001           __end_of_TX_ADDR 0648  
         __end_of_RX_PW_P 0659             __CFG_MCLRE$ON 0000                     ?_main 0070  
           __CFG_WDTE$OFF 0000            __CFG_BOREN$OFF 0000          __end_of_SPI_init 0674  
                   status 0003                     wtemp0 007E           __initialization 07FE  
            __end_of_main 07FE             _SPI_read_byte 0674            __CFG_LPBOR$OFF 0000  
                  ??_main 007C               readData@ret 0074                    _APFCON 011D  
                  _ANSELA 018C                    _ANSELC 018E      __size_of_craftPacket 0033  
          __CFG_PWRTE$OFF 0000          uartWriteByte@dat 0071          uartWritePacket@i 0075  
        __end_of_configIO 06B3            ?_SPI_read_byte 0070   __size_of_SPI_writeArray 001B  
          __CFG_STVREN$ON 0000   __size_of_SPI_write_byte 0010          __end_of_readData 0666  
        __end_of_initUart 064D      __size_of_configureRX 005A          __end_of_resetIRQ 0692  
       __end_of_RX_ADDR_P 0653   __end_of__initialization 07FE           _uartWritePacket 06B3  
          __pcstackCOMMON 0070                 ?_SPI_init 0070            _OPTION_REGbits 0095  
        configureRX@write 007A           ??_SPI_read_byte 0073     uartWritePacket@packet 0074  
              __pmaintext 079B     __end_of_uartWriteByte 070E                ??_SPI_init 0070  
          main@packetMove 0020          SPI_read_byte@ret 0075            main@packetStop 0024  
                 _SSP1BUF 0211                 ?_configIO 0070   __end_of_uartWritePacket 06C6  
                 _TX_ADDR 0647                   _RX_PW_P 0653                 ?_readData 0070  
               ?_initUart 0070                 ?_resetIRQ 0070            _SPI_writeArray 06C6  
          _SPI_write_byte 0692                   __ptext1 06B3                   __ptext2 06E1  
                 __ptext3 0683                   __ptext4 0659                   __ptext5 0648  
                 __ptext6 070E                   __ptext7 0741                   __ptext8 06C6  
                 __ptext9 0674                ??_configIO 0070      end_of_initialization 07FE  
              ??_readData 0073                ??_initUart 0070    __end_of_SPI_writeArray 06E1  
      SPI_writeArray@data 0078                ??_resetIRQ 0079    __end_of_SPI_write_byte 06A2  
               _PORTAbits 000C          __CFG_FOSC$INTOSC 0000             ??_craftPacket 0072  
               _TRISAbits 008C                 _TRISCbits 008E                 _RX_ADDR_P 064D  
        ?_uartWritePacket 0070             resetIRQ@write 007A           ?_SPI_writeArray 0073  
         ?_SPI_write_byte 0070             ??_configureRX 0079       start_initialization 07FE  
       __size_of_SPI_init 000E       __end_of_craftPacket 0741       __end_of_configureRX 079B  
               ___latbits 0000             __pcstackBANK0 0020         __size_of_configIO 0011  
       __size_of_readData 000D         __size_of_initUart 0005     __end_of_SPI_read_byte 0683  
      SPI_write_byte@data 0071         __size_of_resetIRQ 000F           SPI_writeArray@i 0077  
             _craftPacket 070E    __size_of_uartWriteByte 002D                  _LATAbits 010C  
                _LATCbits 010E         SPI_writeArray@ret 0076                  _PIR1bits 0011  
             _configureRX 0741                  _SPI_init 0666    SPI_write_byte@ret_data 0072  
                _WPUAbits 020C          ??_SPI_writeArray 0074          ??_SPI_write_byte 0070  
          uartWriteByte@b 0072             _uartWriteByte 06E1      SPI_read_byte@address 0074  
                __ptext10 0692                  __ptext11 0666                  __ptext12 06A2  
            _SSP1CON1bits 0215                  _configIO 06A2      SPI_writeArray@length 0073  
                _readData 0659                  _initUart 0648             __size_of_main 0063  
                _resetIRQ 0683  __size_of_uartWritePacket 0013            ?_uartWriteByte 0070  
                main@data 0028              _SSP1STATbits 0214         __CFG_CLKOUTEN$OFF 0000  
              _OSCCONbits 0099              craftPacket@x 0073              craftPacket@y 0070  
           __pstringtext1 0653             __pstringtext2 064D             __pstringtext3 0647  
            ?_craftPacket 0070  
